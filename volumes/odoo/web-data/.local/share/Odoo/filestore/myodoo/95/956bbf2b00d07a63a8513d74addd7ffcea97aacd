)]}'
{"version": 3, "sources": ["/base/static/tests/test_ir_model_fields_translation.js", "/web/static/tests/legacy/helpers/test_utils_file.js", "/mail/static/tests/tours/discuss_public_tour.js", "/mail/static/tests/tours/mail_channel_as_guest_tour.js", "/mail/static/tests/tours/mail_full_composer_test_tour.js", "/mail/static/tests/tours/user_modify_own_profile_tour.js", "/portal/static/tests/tours/portal.js", "/account/static/tests/tours/account_dashboard_setup_bar_tests.js", "/account/static/tests/tours/tax_group_tests.js", "/sale/static/tests/tours/sale_signature.js", "/calendar/static/tests/tours/calendar_tour.js", "/contacts/static/tests/tours/debug_menu_set_defaults.js", "/crm/static/tests/tours/create_crm_team_tour.js", "/crm/static/tests/tours/crm_email_and_phone_propagation.js", "/crm/static/tests/tours/crm_forecast_tour.js", "/crm/static/tests/tours/crm_rainbowman.js", "/stock/static/tests/tours/stock_report_tests.js", "/point_of_sale/static/tests/tours/BarcodeScanning.tour.js", "/point_of_sale/static/tests/tours/Chrome.tour.js", "/point_of_sale/static/tests/tours/ChromeWithoutCashMovePermission.tour.js", "/point_of_sale/static/tests/tours/PaymentScreen.tour.js", "/point_of_sale/static/tests/tours/ProductConfigurator.tour.js", "/point_of_sale/static/tests/tours/ProductScreen.tour.js", "/point_of_sale/static/tests/tours/ReceiptScreen.tour.js", "/point_of_sale/static/tests/tours/TicketScreen.tour.js", "/point_of_sale/static/tests/tours/helpers/ChromeTourMethods.js", "/point_of_sale/static/tests/tours/helpers/ErrorPopupTourMethods.js", "/point_of_sale/static/tests/tours/helpers/NumberPopupTourMethods.js", "/point_of_sale/static/tests/tours/helpers/PartnerListScreenTourMethods.js", "/point_of_sale/static/tests/tours/helpers/PaymentScreenTourMethods.js", "/point_of_sale/static/tests/tours/helpers/ProductConfiguratorTourMethods.js", "/point_of_sale/static/tests/tours/helpers/ProductScreenTourMethods.js", "/point_of_sale/static/tests/tours/helpers/ReceiptScreenTourMethods.js", "/point_of_sale/static/tests/tours/helpers/SelectionPopupTourMethods.js", "/point_of_sale/static/tests/tours/helpers/TextAreaPopupTourMethods.js", "/point_of_sale/static/tests/tours/helpers/TextInputPopupTourMethods.js", "/point_of_sale/static/tests/tours/helpers/TicketScreenTourMethods.js", "/point_of_sale/static/tests/tours/helpers/utils.js", "/point_of_sale/static/tests/tours/point_of_sale.js", "/pos_sale/static/tests/helpers/ProductScreenTourMethods.js", "/pos_sale/static/tests/tours/pos_sale_tours.js", "/auth_totp/static/tests/totp_flow.js", "/auth_totp_mail/static/tests/totp_flow.js", "/auth_totp_portal/static/tests/totp_portal.js", "/purchase_product_matrix/static/tests/tours/purchase_product_matrix_tour.js"], "mappings": "AAAA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpxFA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1BA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChIA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlCA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhGA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvFA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvnnhMA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjvvCA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnzxZA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnHA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnVA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5HA;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["/** @odoo-module **/\n\n\"use strict\";\n\nimport tour from \"web_tour.tour\";\n\nfunction checkLoginColumn(translation) {\n    return [\n        tour.stepUtils.showAppsMenuItem(), {\n            content: \"Settings\",\n            trigger: 'a[data-menu-xmlid=\"base.menu_administration\"]',\n            run: 'click',\n        }, {\n            content: \"Open Users & Companies\",\n            trigger: '[data-menu-xmlid=\"base.menu_users\"]',\n            run: \"click\",\n        }, {\n            content: \"Open Users\",\n            trigger: '[data-menu-xmlid=\"base.menu_action_res_users\"]',\n            run: \"click\",\n        }, {\n            content: `Login column should be ${translation}`,\n            trigger: `[data-name=\"login\"] span:contains(\"${translation}\")`,\n        }\n    ]\n}\n\ntour.register('ir_model_fields_translation_tour', {\n    test: true,\n    url: '/web',\n}, checkLoginColumn('Identifiant'));\n\ntour.register('ir_model_fields_translation_tour2', {\n    test: true,\n    url: '/web',\n}, checkLoginColumn('Identifiant2'));\n", "odoo.define('web.test_utils_file', function () {\n\"use strict\";\n\n/**\n * FILE Test Utils\n *\n * This module defines various utility functions to help simulate events with\n * files, such as drag-and-drop.\n *\n * Note that all methods defined in this module are exported in the main\n * testUtils file.\n */\n\n\n//------------------------------------------------------------------------------\n// Private functions\n//------------------------------------------------------------------------------\n\n/**\n * Create a fake object 'dataTransfer', linked to some files, which is passed to\n * drag and drop events.\n *\n * @param {Object[]} files\n * @returns {Object}\n */\nfunction _createFakeDataTransfer(files) {\n    return {\n        dropEffect: 'all',\n        effectAllowed: 'all',\n        files,\n        getData: function () {\n            return files;\n        },\n        items: [],\n        types: ['Files'],\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public functions\n//------------------------------------------------------------------------------\n\n/**\n * Create a file object, which can be used for drag-and-drop.\n *\n * @param {Object} data\n * @param {string} data.name\n * @param {string} data.content\n * @param {string} data.contentType\n * @returns {Promise<Object>} resolved with file created\n */\nfunction createFile(data) {\n    // Note: this is only supported by Chrome, and does not work in Incognito mode\n    return new Promise(function (resolve, reject) {\n        var requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n        if (!requestFileSystem) {\n            throw new Error('FileSystem API is not supported');\n        }\n        requestFileSystem(window.TEMPORARY, 1024 * 1024, function (fileSystem) {\n            fileSystem.root.getFile(data.name, { create: true }, function (fileEntry) {\n                fileEntry.createWriter(function (fileWriter) {\n                    fileWriter.onwriteend = function (e) {\n                        fileSystem.root.getFile(data.name, {}, function (fileEntry) {\n                            fileEntry.file(function (file) {\n                                resolve(file);\n                            });\n                        });\n                    };\n                    fileWriter.write(new Blob([ data.content ], { type: data.contentType }));\n                });\n            });\n        });\n    });\n}\n\n/**\n * Drag a file over a DOM element\n *\n * @param {$.Element} $el\n * @param {Object} file must have been created beforehand (@see createFile)\n */\nfunction dragoverFile($el, file) {\n    var ev = new Event('dragover', { bubbles: true });\n    Object.defineProperty(ev, 'dataTransfer', {\n        value: _createFakeDataTransfer(file),\n    });\n    $el[0].dispatchEvent(ev);\n}\n\n/**\n * Drop a file on a DOM element.\n *\n * @param {$.Element} $el\n * @param {Object} file must have been created beforehand (@see createFile)\n */\nfunction dropFile($el, file) {\n    var ev = new Event('drop', { bubbles: true, });\n    Object.defineProperty(ev, 'dataTransfer', {\n        value: _createFakeDataTransfer([file]),\n    });\n    $el[0].dispatchEvent(ev);\n}\n\n/**\n * Drop some files on a DOM element.\n *\n * @param {$.Element} $el\n * @param {Object[]} files must have been created beforehand (@see createFile)\n */\nfunction dropFiles($el, files) {\n    var ev = new Event('drop', { bubbles: true, });\n    Object.defineProperty(ev, 'dataTransfer', {\n        value: _createFakeDataTransfer(files),\n    });\n    $el[0].dispatchEvent(ev);\n}\n\n/**\n * Set files in a file input\n *\n * @param {DOM.Element} el\n * @param {Object[]} files must have been created beforehand\n *   @see testUtils.file.createFile\n */\nfunction inputFiles(el, files) {\n    // could not use _createFakeDataTransfer as el.files assignation will only\n    // work with a real FileList object.\n    const dataTransfer = new window.DataTransfer();\n    for (const file of files) {\n        dataTransfer.items.add(file);\n    }\n    el.files = dataTransfer.files;\n    /**\n     * Changing files programatically is not supposed to trigger the event but\n     * it does in Chrome versions before 73 (which is on runbot), so in that\n     * case there is no need to make a manual dispatch, because it would lead to\n     * the files being added twice.\n     */\n    const versionRaw = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n    const chromeVersion = versionRaw ? parseInt(versionRaw[2], 10) : false;\n    if (!chromeVersion || chromeVersion >= 73) {\n        el.dispatchEvent(new Event('change'));\n    }\n}\n\n//------------------------------------------------------------------------------\n// Exposed API\n//------------------------------------------------------------------------------\n\nreturn {\n    createFile: createFile,\n    dragoverFile: dragoverFile,\n    dropFile: dropFile,\n    dropFiles,\n    inputFiles,\n};\n\n});\n", "/** @odoo-module **/\n\nimport tour from 'web_tour.tour';\n\ntour.register('mail/static/tests/tours/discuss_public_tour.js', {\n    test: true,\n}, [{\n    trigger: '.o_DiscussPublicView',\n    extraTrigger: '.o_ThreadView',\n}, {\n    content: \"Check that we are on channel page\",\n    trigger: '.o_ThreadView',\n    run() {\n        if (!window.location.pathname.startsWith('/discuss/channel')) {\n            console.error('Did not automatically redirect to channel page');\n        }\n        // Wait for modules to be loaded or failed for the next step\n        odoo.__DEBUG__.didLogInfo.then(() => {\n            const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;\n            if ([missing, failed, unloaded].some(arr => arr.length)) {\n                console.error(\"Couldn't load all JS modules.\", JSON.stringify({ missing, failed, unloaded }));\n            }\n            document.body.classList.add('o_mail_channel_public_modules_loaded');\n        });\n    },\n    extraTrigger: '.o_mail_channel_public_modules_loaded',\n}, {\n    content: \"Wait for all modules loaded check in previous step\",\n    trigger: '.o_mail_channel_public_modules_loaded',\n}]);\n", "/** @odoo-module **/\n\nimport tour from 'web_tour.tour';\n\ntour.register('mail/static/tests/tours/mail_channel_as_guest_tour.js', {\n    test: true,\n}, [{\n    content: \"Click join\",\n    trigger: '.o_WelcomeView_joinButton',\n    extraTrigger: '.o_ThreadView',\n}, {\n    content: \"Check that we are on channel page\",\n    trigger: '.o_ThreadView',\n    run() {\n        if (!window.location.pathname.startsWith('/discuss/channel')) {\n            console.error('Clicking on join button did not redirect to channel page');\n        }\n        // Wait for modules to be loaded or failed for the next step\n        odoo.__DEBUG__.didLogInfo.then(() => {\n            const { missing, failed, unloaded } = odoo.__DEBUG__.jsModules;\n            if ([missing, failed, unloaded].some(arr => arr.length)) {\n                console.error(\"Couldn't load all JS modules.\", JSON.stringify({ missing, failed, unloaded }));\n            }\n            document.body.classList.add('o_mail_channel_as_guest_tour_modules_loaded');\n        });\n    },\n    extraTrigger: '.o_mail_channel_as_guest_tour_modules_loaded',\n}, {\n    content: \"Wait for all modules loaded check in previous step\",\n    trigger: '.o_mail_channel_as_guest_tour_modules_loaded',\n}]);\n", "/** @odoo-module **/\n\nimport {\n    createFile,\n    inputFiles,\n} from 'web.test_utils_file';\n\nimport tour from 'web_tour.tour';\n\n/**\n * This tour depends on data created by python test in charge of launching it.\n * It is not intended to work when launched from interface. It is needed to test\n * an action (action manager) which is not possible to test with QUnit.\n * @see mail/tests/test_mail_full_composer.py\n */\ntour.register('mail/static/tests/tours/mail_full_composer_test_tour.js', {\n    test: true,\n}, [{\n    content: \"Click on Send Message\",\n    trigger: '.o_ChatterTopbar_buttonSendMessage',\n}, {\n    content: \"Write something in composer\",\n    trigger: '.o_ComposerTextInput_textarea',\n    run: 'text blahblah',\n}, {\n    content: \"Add one file in composer\",\n    trigger: '.o_Composer_buttonAttachment',\n    async run() {\n        const file = await createFile({\n            content: 'hello, world',\n            contentType: 'text/plain',\n            name: 'text.txt',\n        });\n        const messaging = await odoo.__DEBUG__.messaging;\n        const uploader = messaging.models['ComposerView'].all()[0].fileUploader;\n        inputFiles(\n            uploader.fileInput,\n            [file]\n        );\n    },\n}, {\n    content: \"Open full composer\",\n    trigger: '.o_Composer_buttonFullComposer',\n    extra_trigger: '.o_AttachmentCard:not(.o-isUploading)' // waiting the attachment to be uploaded\n}, {\n    content: \"Check the earlier provided attachment is listed\",\n    trigger: '.o_AttachmentCard[title=\"text.txt\"]',\n    run() {},\n}, {\n    content: \"Check subject is autofilled\",\n    trigger: '[name=\"subject\"] input',\n    run() {\n        const subjectValue = document.querySelector('[name=\"subject\"] input').value;\n        if (subjectValue !== \"Re: Test User\") {\n            console.error(\n                `Full composer should have \"Re: Test User\" in subject input (actual: ${subjectValue})`\n            );\n        }\n    },\n}, {\n    content: \"Check composer content is kept\",\n    trigger: '.o_field_html[name=\"body\"]',\n    run() {\n        const bodyContent = document.querySelector('.o_field_html[name=\"body\"]').textContent;\n        if (!bodyContent.includes(\"blahblah\")) {\n            console.error(\n                `Full composer should contain text from small composer (\"blahblah\") in body input (actual: ${bodyContent})`\n            );\n        }\n    },\n}, {\n    content: \"Open templates\",\n    trigger: '.o_field_widget[name=\"template_id\"] input',\n}, {\n    content: \"Check a template is listed\",\n    in_modal: false,\n    trigger: '.ui-autocomplete .ui-menu-item a:contains(\"Test template\")',\n    run() {},\n}, {\n    content: \"Send message\",\n    trigger: '.o_mail_send',\n}, {\n    content: \"Check message is shown\",\n    trigger: '.o_Message:contains(\"blahblah\")',\n}, {\n    content: \"Check message contains the attachment\",\n    trigger: '.o_Message .o_AttachmentCard_filename:contains(\"text.txt\")',\n}]);\n", "/** @odoo-module **/\n\nimport tour from 'web_tour.tour';\n\n/**\n * Verify that a user can modify their own profile information.\n */\ntour.register('mail/static/tests/tours/user_modify_own_profile_tour.js', {\n    test: true,\n}, [{\n    content: 'Open user account menu',\n    trigger: '.o_user_menu button',\n}, {\n    content: \"Open preferences / profile screen\",\n    trigger: '[data-menu=settings]',\n}, {\n    content: \"Update the email address\",\n    trigger: 'div[name=\"email\"] input',\n    run: 'text updatedemail@example.com',\n}, {\n    content: \"Save the form\",\n    trigger: 'button[name=\"preference_save\"]',\n}, {\n    content: \"Wait until the modal is closed\",\n    trigger: 'body:not(.modal-open)',\n}]);\n", "odoo.define('portal.tour', function (require) {\n'use strict';\n\nvar tour = require(\"web_tour.tour\");\n\ntour.register('portal_load_homepage', {\n    test: true,\n    url: '/my',\n},\n    [\n        {\n            content: \"Check portal is loaded\",\n            trigger: 'a[href*=\"/my/account\"]:contains(\"Edit\"):first',\n        },\n        {\n            content: \"Load my account details\",\n            trigger: 'input[value=\"Joel Willis\"]'\n        }\n    ]\n);\n\n});\n", "odoo.define('account.dashboard.setup.tour', function (require) {\n    \"use strict\";\n\n    var core = require('web.core');\n    var tour = require('web_tour.tour');\n\n    var _t = core._t;\n\n    tour.register('account_render_report', {\n        test: true,\n        url: '/web',\n    }, [tour.stepUtils.showAppsMenuItem(),\n    {\n        id: 'account_menu_click',\n        trigger: '.o_app[data-menu-xmlid=\"account.menu_finance\"]',\n        position: 'bottom',\n    }, {\n        trigger: '.o_data_row:first .o_data_cell',\n        extra_trigger: '.breadcrumb',\n    }, {\n        trigger: '.o_control_panel button:contains(\"' + _t('Print') + '\")',\n    }, {\n        trigger: '.o_control_panel .o-dropdown--menu span:contains(\"' + _t('Invoices without Payment') + '\")',\n    }, {\n        trigger: 'iframe .o_report_layout_standard h2',\n        content: 'Primary color is correct',\n        run: function () {\n            if (this.$anchor.css('color') !== \"rgb(18, 52, 86)\") {\n                console.error('The primary color should be the one set on the company.');\n            }\n        },\n    }, {\n        trigger: 'iframe .o_report_layout_standard #informations div strong',\n        content: 'Secondary color is correct',\n        run: function () {\n            if (this.$anchor.css('color') !== \"rgb(120, 145, 1)\") {\n                console.error('The secondary color should be the one set on the company.');\n            }\n        },\n    }\n        ]);\n});\n", "/** @odoo-module alias=account.tax.group.tour.tests */\n\"use strict\";\n\nimport tour from 'web_tour.tour';\n\ntour.register('account_tax_group', {\n    test: true,\n    url: \"/web\",\n}, [tour.stepUtils.showAppsMenuItem(),\n    {\n        id: 'account_menu_click',\n        content: \"Go to Invoicing\",\n        trigger: '.o_app[data-menu-xmlid=\"account.menu_finance\"]',\n    },\n    {\n        content: \"Go to Vendors\",\n        trigger: 'span:contains(\"Vendors\")',\n    },\n    {\n        content: \"Go to Bills\",\n        trigger: 'a:contains(\"Bills\")',\n    },\n    {\n        extra_trigger: '.breadcrumb:contains(\"Bills\")',\n        content: \"Create new bill\",\n        trigger: '.o_list_button_add',\n    },\n    // Set a vendor\n    {\n        content: \"Add vendor\",\n        trigger: 'div.o_field_widget.o_field_res_partner_many2one[name=\"partner_id\"] div input',\n        run: 'text Azure Interior',\n    },\n    {\n        content: \"Valid vendor\",\n        trigger: '.ui-menu-item a:contains(\"Azure Interior\")',\n    },\n    // Add First product\n    {\n        content: \"Add items\",\n        trigger: 'div[name=\"invoice_line_ids\"] .o_field_x2many_list_row_add a:contains(\"Add a line\")',\n    },\n    {\n        content: \"Select input\",\n        trigger: 'div[name=\"invoice_line_ids\"] .o_selected_row .o_list_many2one[name=\"product_id\"] input',\n    },\n    {\n        content: \"Type item\",\n        trigger: 'div[name=\"invoice_line_ids\"] .o_selected_row .o_list_many2one[name=\"product_id\"] input',\n        run: \"text Corner Desk Right Sit\",\n    },\n    {\n        content: \"Valid item\",\n        trigger: '.ui-menu-item-wrapper:contains(\"Corner Desk Right Sit\")',\n    },\n    // Save account.move\n    {\n        content: \"Save the account move\",\n        trigger: '.o_form_button_save',\n    },\n    ...tour.stepUtils.saveForm(),\n    // Edit tax group amount\n    {\n        content: \"Edit tax group amount\",\n        trigger: '.o_tax_group_edit',\n    },\n    {\n        content: \"Modify the input value\",\n        trigger: '.o_tax_group_edit_input input',\n        run: function (actions) {\n            $('.o_tax_group_edit_input input').val(200);\n            $('.o_tax_group_edit_input input').select();\n            $('.o_tax_group_edit_input input').blur();\n        },\n    },\n    // Check new value for total (with modified tax_group_amount).\n    {\n        content: \"Valid total amount\",\n        trigger: 'span[name=\"amount_total\"]:contains(\"800\")',\n    },\n    // Modify the quantity of the object\n    {\n        content: \"Select item quantity\",\n        trigger: 'div[name=\"invoice_line_ids\"] tbody tr.o_data_row .o_list_number[name=\"quantity\"]',\n    },\n    {\n        content: \"Change item quantity\",\n        trigger: 'div[name=\"invoice_line_ids\"] tbody tr.o_data_row .o_list_number[name=\"quantity\"] input',\n        run: 'text 2',\n    },\n    {\n        content: \"Valid the new value\",\n        trigger: 'div[name=\"invoice_line_ids\"] tbody tr.o_data_row .o_list_number[name=\"quantity\"] input',\n        run: function (actions) {\n            let keydownEvent = jQuery.Event('keydown');\n            keydownEvent.which = 13;\n            this.$anchor.trigger(keydownEvent);\n        },\n    },\n    // Save form\n    {\n        content: \"Save the account move\",\n        trigger: '.o_form_button_save',\n    },\n    ...tour.stepUtils.saveForm(),\n    // Check new tax group value\n    {\n        content: \"Check new value of tax group\",\n        trigger: '.o_tax_group_amount_value:contains(\"120\")',\n    },\n    {\n        content: \"Edit tax value\",\n        trigger: '.o_tax_group_edit_input input',\n        run: 'text 2'\n    },\n    {\n        content: \"Check new value of total\",\n        trigger: '.oe_subtotal_footer_separator:contains(\"1,202\")',\n    },\n    {\n        content: \"Discard changes\",\n        trigger: '.o_form_button_cancel',\n    },\n    {\n        content: \"Check tax value is reset\",\n        trigger: '.o_tax_group_amount_value:contains(\"120\")',\n    },\n]);\n", "odoo.define('sale.tour_sale_signature', function (require) {\n'use strict';\n\nvar tour = require('web_tour.tour');\n\n// This tour relies on data created on the Python test.\ntour.register('sale_signature', {\n    test: true,\n    url: '/my/quotes',\n},\n[\n    {\n        content: \"open the test SO\",\n        trigger: 'a:containsExact(\"test SO\")',\n    },\n    {\n        content: \"click sign\",\n        trigger: 'a:contains(\"Sign\")',\n    },\n    {\n        content: \"check submit is enabled\",\n        trigger: '.o_portal_sign_submit:enabled',\n        run: function () {},\n    },\n    {\n        content: \"click select style\",\n        trigger: '.o_web_sign_auto_select_style a',\n    },\n    {\n        content: \"click style 4\",\n        trigger: '.o_web_sign_auto_font_selection a:eq(3)',\n    },\n    {\n        content: \"click submit\",\n        trigger: '.o_portal_sign_submit:enabled',\n    },\n    {\n        content: \"check it's confirmed\",\n        trigger: '#quote_content:contains(\"Thank You\")',\n    }, {\n        trigger: '#quote_content',\n        run: function () {\n            window.location.href = window.location.origin + '/web';\n        },  // Avoid race condition at the end of the tour by returning to the home page.\n    },\n    {\n        trigger: 'nav',\n        run: function() {},\n    }\n]);\n});\n", "/** @odoo-module **/\nimport tour from 'web_tour.tour';\n\nconst todayDate = function() {\n    let now = new Date();\n    let year = now.getFullYear();\n    let month = String(now.getMonth() + 1).padStart(2, '0');\n    let day = String(now.getDate()).padStart(2, '0');\n\n    return `${month}/${day}/${year} 10:00:00`;\n};\n\ntour.register('calendar_appointments_hour_tour', {\n    url: '/web',\n    test: true,\n}, [\n    tour.stepUtils.showAppsMenuItem(),\n    {\n        trigger: '.o_app[data-menu-xmlid=\"calendar.mail_menu_calendar\"]',\n        content: 'Open Calendar',\n        run: 'click',\n    },\n    {\n        trigger: '.o-calendar-button-new',\n        content: 'Create a new event',\n        run: 'click',\n    },\n    {\n        trigger: '#name',\n        content: 'Give a name to the new event',\n        run: 'text TEST EVENT',\n    },\n    {\n        trigger: '#start',\n        content: 'Give a date to the new event',\n        run: `text ${todayDate()}`,\n    },\n    {\n        trigger: '.fa-cloud-upload',\n        content: 'Save the new event',\n        run: 'click',\n    },\n    {\n        trigger: '.dropdown-item:contains(\"Calendar\")',\n        content: 'Go back to Calendar view',\n        run: 'click',\n    },\n    {\n        trigger: '.dropdown-toggle:contains(\"Week\")',\n        content: 'Click to change calendar view',\n        run: 'click',\n    },\n    {\n        trigger: '.dropdown-item:contains(\"Month\")',\n        content: 'Change the calendar view to Month',\n        run: 'click',\n    },\n    {\n        trigger: '.fc-day-header:contains(\"Monday\")',\n        content: 'Change the calendar view to week',\n    },\n    {\n        trigger: '.fc-time:contains(\"10:00\")',\n        content: 'Check the time is properly displayed',\n    },\n    {\n        trigger: '.o_event_title:contains(\"TEST EVENT\")',\n        content: 'Check the event title',\n    },\n]);\n\ntour.register('test_calendar_delete_tour', {\n    test: true,\n},\n[\n    {\n        content: 'Select filter (everybody)',\n        trigger: 'div[data-value=\"all\"] input',\n    },\n    {\n        content: 'Click on the event (focus + waiting)',\n        trigger: 'a .fc-content:contains(\"Test Event\")',\n        async run() {\n            $('a .fc-content:contains(\"Test Event\")').click();\n            await new Promise((r) => setTimeout(r, 1000));\n            $('a .fc-content:contains(\"Test Event\")').click();\n        }\n    },\n    {\n        content: 'Delete the event',\n        trigger: '.o_cw_popover_delete',\n    },\n    {\n        content: 'Validate the deletion',\n        trigger:'button:contains(\"Ok\")',\n        async run() {\n            $('button:contains(\"Ok\")').click();\n            await new Promise((r) => setTimeout(r, 1000));\n        }\n    },\n]);\n\ntour.register('test_calendar_decline_tour', {\n    test: true,\n},\n[\n    {\n        content: 'Click on the event (focus + waiting)',\n        trigger: 'a .fc-content:contains(\"Test Event\")',\n        async run() {\n            $('a .fc-content:contains(\"Test Event\")').click();\n            await new Promise((r) => setTimeout(r, 1000));\n            $('a .fc-content:contains(\"Test Event\")').click();\n        }\n    },\n    {\n        content: 'Delete the event',\n        trigger: '.o_cw_popover_delete',\n    },\n    {\n        content: 'Wait declined status',\n        trigger: '.o_attendee_status_declined',\n    },\n]);\n\ntour.register('test_calendar_decline_with_everybody_filter_tour', {\n    test: true,\n},\n[\n    {\n        content: 'Select filter (everybody)',\n        trigger: 'div[data-value=\"all\"] input',\n    },\n    {\n        content: 'Click on the event (focus + waiting)',\n        trigger: 'a .fc-content:contains(\"Test Event\")',\n        async run() {\n            $('a .fc-content:contains(\"Test Event\")').click();\n            await new Promise((r) => setTimeout(r, 1000));\n            $('a .fc-content:contains(\"Test Event\")').click();\n        }\n    },\n    {\n        content: 'Delete the event',\n        trigger: '.o_cw_popover_delete',\n    },\n    {\n        content: 'Select filter (everybody)',\n        trigger: 'div[data-value=\"all\"] input',\n    },\n    {\n        content: 'Wait declined status',\n        trigger: '.o_attendee_status_declined',\n    },\n]);\n", "odoo.define('debug_menu_set_defaults.tour', function (require) {\n    \"use strict\";\n\n    var tour = require('web_tour.tour');\n\n    tour.register('debug_menu_set_defaults', {\n        test: true,\n        url: '/web?debug=1',\n    },\n        [\n            ...tour.stepUtils.goToAppSteps('contacts.menu_contacts', \"Open the contacts menu\"),\n            {\n                content: \"Create a new contact\",\n                trigger: '.o-kanban-button-new',\n            },\n            {\n                content: \"Check that Company is checked by default, and not Individual\",\n                trigger: '.o_field_widget[name=\"company_type\"] input[data-value=\"company\"]:checked',\n                run: function () {},\n            },\n            {\n                content: \"Select the individual radio button\",\n                trigger: '.o_field_widget[name=\"company_type\"] input[data-value=\"person\"]',\n            },\n            {\n                content: \"Open the debug menu\",\n                trigger: '.o_debug_manager button',\n            },\n            {\n                content: \"Click the Set Defaults menu\",\n                trigger: '.o_debug_manager .dropdown-item:contains(Set Defaults)',\n            },\n            {\n                content: \"Choose Company Type = Individual\",\n                trigger: '#formview_default_fields',\n                run: function () {\n                    const element_field = document.querySelector('select#formview_default_fields');\n                    element_field.value = 'company_type';\n                    element_field.dispatchEvent(new Event(\"change\"));\n                },\n            },\n            {\n                content: \"Check that there are conditions\",\n                trigger: '#formview_default_conditions',\n            },\n            {\n                content: \"Save the new default\",\n                trigger: 'footer button:contains(Save default)',\n            },\n            {\n                content: \"Discard the contact creation\",\n                trigger: 'button.o_form_button_cancel',\n            },\n            {\n                trigger: '.o-kanban-button-new',\n            },\n            {\n                content: \"Check that Individual is checked instead of Company\",\n                trigger: '.o_field_widget[name=\"company_type\"] input[data-value=\"person\"]:checked',\n                run: function () {},\n            },\n            {\n                content: \"Discard the contact creation\",\n                trigger: 'button.o_form_button_cancel',\n            },\n            {\n                content: \"Wait for discard\",\n                trigger: '.o_control_panel .o-kanban-button-new',\n                run() {},\n            },\n        ]\n    );\n\n});\n", "/** @odoo-module */\n\nimport tour from 'web_tour.tour';\n\ntour.register('create_crm_team_tour', {\n    url: \"/web\",\n    test: true,\n}, [\n    ...tour.stepUtils.goToAppSteps('crm.crm_menu_root'),\n{\n    trigger: 'button[data-menu-xmlid=\"crm.crm_menu_config\"]',\n}, {\n    trigger: 'a[data-menu-xmlid=\"crm.crm_team_config\"]',\n}, {\n    trigger: 'button.o_list_button_add',\n}, {\n    trigger: 'input[id=\"name\"]',\n    run: 'text My CRM Team',\n}, {\n    trigger: 'button.o-kanban-button-new',\n}, {\n    trigger: 'div.modal-dialog tr:contains(\"Test Salesman\") input.form-check-input',\n    run: 'click',\n}, {\n    trigger: 'div.modal-dialog tr:contains(\"Test Sales Manager\") input.form-check-input',\n    run: 'click',\n}, {\n    trigger: 'div.modal-dialog tr:contains(\"Test Sales Manager\") input.form-check-input:checked',\n    run: () => {},\n}, {\n    trigger: 'button.o_select_button',\n}, \n    ...tour.stepUtils.saveForm()\n]);\n", "odoo.define('crm.crm_email_and_phone_propagation', function (require) {\n    'use strict';\n\n    const tour = require('web_tour.tour');\n\n    tour.register('crm_email_and_phone_propagation_edit_save', {\n        test: true,\n        url: '/web',\n    }, [\n        tour.stepUtils.showAppsMenuItem(),\n        {\n            trigger: '.o_app[data-menu-xmlid=\"crm.crm_menu_root\"]',\n            content: 'open crm app',\n        }, {\n            trigger: '.o_kanban_record .o_kanban_record_title span:contains(Test Lead Propagation)',\n            content: 'Open the first lead',\n            run: 'click',\n        }, {\n            trigger: '.o_form_button_save',\n            extra_trigger: '.o_form_editable .o_field_widget[name=email_from] input',\n            content: 'Save the lead',\n            run: 'click',\n        },\n    ]);\n\n    tour.register('crm_email_and_phone_propagation_remove_email_and_phone', {\n        test: true,\n        url: '/web',\n    }, [\n        tour.stepUtils.showAppsMenuItem(),\n        {\n            trigger: '.o_app[data-menu-xmlid=\"crm.crm_menu_root\"]',\n            content: 'open crm app',\n        }, {\n            trigger: '.o_kanban_record .o_kanban_record_title span:contains(Test Lead Propagation)',\n            content: 'Open the first lead',\n            run: 'click',\n        }, {\n            trigger: '.o_form_editable .o_field_widget[name=email_from] input',\n            extra_trigger: '.o_form_editable .o_field_widget[name=phone] input',\n            content: 'Remove the email and the phone',\n            run: function (action) {\n                action.remove_text(\"\", \".o_form_editable .o_field_widget[name=email_from] input\");\n                action.remove_text(\"\", \".o_form_editable .o_field_widget[name=phone] input\");\n            },\n        }, {\n            trigger: '.o_back_button',\n            // wait the warning message to be visible\n            extra_trigger: '.o_form_sheet_bg .fa-exclamation-triangle:not(.o_invisible_modifier)',\n            content: 'Save the lead and exit to kanban',\n            run: 'click',\n        },{\n            trigger: '.o_kanban_renderer',\n        }\n    ]);\n});\n", "/** @odoo-module */\nimport tour from 'web_tour.tour';\nconst today = moment();\n\ntour.register('crm_forecast', {\n    test: true,\n    url: \"/web\",\n}, [\n    tour.stepUtils.showAppsMenuItem(),\n    {\n        trigger: \".o_app[data-menu-xmlid='crm.crm_menu_root']\",\n        content: \"open crm app\",\n    }, {\n        trigger: '.dropdown-toggle[data-menu-xmlid=\"crm.crm_menu_report\"]',\n        content: 'Open Reporting menu',\n        run: 'click',\n    }, {\n        trigger: '.dropdown-item[data-menu-xmlid=\"crm.crm_menu_forecast\"]',\n        content: 'Open Forecast menu',\n        run: 'click',\n    }, {\n        trigger: '.o_column_quick_create:contains(Add next month)',\n        content: 'Wait page loading'\n    }, {\n        trigger: \".o-kanban-button-new\",\n        content: \"click create\",\n        run: 'click',\n    }, {\n        trigger: \".o_field_widget[name=name] input\",\n        content: \"complete name\",\n        run: \"text Test Opportunity 1\",\n    }, {\n        trigger: \".o_field_widget[name=expected_revenue] input\",\n        content: \"complete expected revenue\",\n        run: \"text 999999\",\n    }, {\n        trigger: \"button.o_kanban_edit\",\n        content: \"edit lead\",\n    }, {\n        trigger: \"div[name=date_deadline] input\",\n        content: \"complete expected closing\",\n        run: `text ${today.format(\"MM/DD/YYYY\")}`,\n    }, {\n        trigger: \"div[name=date_deadline] input\",\n        content: \"click to make the datepicker disappear\",\n        run: \"click\"\n    }, {\n        trigger: \"body:not(:has(div.bootstrap-datetimepicker-widget))\",\n        content: \"wait for date_picker to disappear\",\n        run: function () {},\n    }, {\n        trigger: '.o_back_button',\n        content: 'navigate back to the kanban view',\n        position: \"bottom\",\n        run: \"click\"\n    }, {\n        trigger: \".o_kanban_record .o_kanban_record_title:contains('Test Opportunity 1')\",\n        content: \"move to the next month\",\n        run: function (actions) {\n            const undefined_groups = $('.o_column_title:contains(\"None\")').length;\n            actions.drag_and_drop_native(`.o_opportunity_kanban .o_kanban_group:eq(${1 + undefined_groups})`, this.$anchor);\n        },\n    }, {\n        trigger: \".o_kanban_record .o_kanban_record_title:contains('Test Opportunity 1')\",\n        content: \"edit lead\",\n        run: \"click\"\n    }, {\n        trigger: \".o_field_widget[name=date_deadline] input\",\n        content: \"complete expected closing\",\n        run: function (actions) {\n            actions.text(`text ${moment(today).add(5, 'months').startOf('month').subtract(1, 'days').format(\"MM/DD/YYYY\")}`, this.$anchor);\n            this.$anchor[0].dispatchEvent(new KeyboardEvent(\"keydown\", { bubbles: true, key: \"Escape\" }));\n        },\n    }, {\n        trigger: \"body:not(:has(div.bootstrap-datetimepicker-widget))\",\n        content: \"wait for date_picker to disappear\",\n        run: function () {},\n    }, {\n        trigger: \".o_field_widget[name=probability] input\",\n        content: \"max out probability\",\n        run: \"text 100\"\n    }, {\n        trigger: '.o_back_button',\n        content: 'navigate back to the kanban view',\n        position: \"bottom\",\n        run: \"click\"\n    }, {\n        trigger: '.o_kanban_add_column',\n        content: \"add next month\",\n        run: \"click\"\n    }, {\n        trigger: \".o_kanban_record:contains('Test Opportunity 1'):contains('Won')\",\n        content: \"assert that the opportunity has the Won banner\",\n        run: function () {},\n    }\n]);\n", "/** @odoo-module **/\n\n    import tour from 'web_tour.tour';\n\n    tour.register('crm_rainbowman', {\n        test: true,\n        url: \"/web\",\n    }, [\n        tour.stepUtils.showAppsMenuItem(),\n        {\n            trigger: \".o_app[data-menu-xmlid='crm.crm_menu_root']\",\n            content: \"open crm app\",\n        }, {\n            trigger: \".o-kanban-button-new\",\n            content: \"click create\",\n        }, {\n            trigger: \".o_field_widget[name=name] input\",\n            content: \"complete name\",\n            run: \"text Test Lead 1\",\n        }, {\n            trigger: \".o_field_widget[name=expected_revenue] input\",\n            content: \"complete expected revenue\",\n            run: \"text 999999997\",\n        }, {\n            trigger: \"button.o_kanban_add\",\n            content: \"create lead\",\n        }, {\n            trigger: \".o_kanban_record .o_kanban_record_title:contains('Test Lead 1')\",\n            content: \"move to won stage\",\n            run: \"drag_and_drop_native .o_opportunity_kanban .o_kanban_group:eq(3) \"\n        }, {\n            trigger: \".o_reward_rainbow\",\n            extra_trigger: \".o_reward_rainbow\",\n            run: function () {} // check rainbowman is properly displayed\n        }, {\n            // This step and the following simulates the fact that after drag and drop,\n            // from the previous steps, a click event is triggered on the window element,\n            // which closes the currently shown .o_kanban_quick_create.\n            trigger: \".o_kanban_renderer\",\n        }, {\n            trigger: \".o_kanban_renderer:not(:has(.o_kanban_quick_create))\",\n            run() {},\n        }, {\n            trigger: \".o-kanban-button-new\",\n            content: \"create second lead\",\n        }, {\n            trigger: \".o_field_widget[name=name] input\",\n            content: \"complete name\",\n            run: \"text Test Lead 2\",\n        }, {\n            trigger: \".o_field_widget[name=expected_revenue] input\",\n            content: \"complete expected revenue\",\n            run: \"text 999999998\",\n        }, {\n            trigger: \"button.o_kanban_add\",\n            content: \"create lead\",\n        }, {\n            trigger: \".o_kanban_record .o_kanban_record_title:contains('Test Lead 2')\",\n            run: function () {} // wait for the record to be properly created\n        }, {\n            // move first test back to new stage to be able to test rainbowman a second time\n            trigger: \".o_kanban_record .o_kanban_record_title:contains('Test Lead 1')\",\n            content: \"move back to new stage\",\n            run: \"drag_and_drop .o_opportunity_kanban .o_kanban_group:eq(0) \"\n        }, {\n            trigger: \".o_kanban_record .o_kanban_record_title:contains('Test Lead 2')\",\n            content: \"click on second lead\",\n        }, {\n            trigger: \".o_statusbar_status button[data-value='4']\",\n            content: \"move lead to won stage\",\n        },\n        ...tour.stepUtils.saveForm(),\n        {\n            trigger: \".o_statusbar_status button[data-value='1']\",\n            extra_trigger: \".o_reward_rainbow\",\n            content: \"move lead to previous stage & rainbowman appears\",\n        }, {\n            trigger: \"button[name=action_set_won_rainbowman]\",\n            content: \"click button mark won\",\n        },\n        ...tour.stepUtils.saveForm(),\n        {\n            trigger: \".o_menu_brand\",\n            extra_trigger: \".o_reward_rainbow\",\n            content: \"last rainbowman appears\",\n        }\n    ]);\n", "odoo.define('stock.reports.setup.tour', function (require) {\n    \"use strict\";\n\n    const tour = require('web_tour.tour');\n\n    tour.register('test_stock_route_diagram_report', {\n        test: true,\n    }, [\n    {\n        trigger: '.o_kanban_record',\n        extra_trigger:'.breadcrumb',\n    },\n    {\n        trigger: '.nav-item > a:contains(\"Inventory\")',\n    },\n    {\n        trigger: '.btn[id=\"stock.view_diagram_button\"]',\n    },\n    {\n        trigger: 'iframe .o_report_stock_rule',\n    },\n    ]);\n});\n", "odoo.define('point_of_sale.tour.BarcodeScanning', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    const Tour = require('web_tour.tour');\n\n    startSteps();\n\n\n    // Add a product with its barcode\n    ProductScreen.do.scan_barcode(\"0123456789\");\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand');\n    ProductScreen.do.scan_barcode(\"0123456789\");\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand', 2);\n\n    // Test \"Prices product\" EAN-13 `23.....{NNNDD}` barcode pattern\n    ProductScreen.do.scan_ean13_barcode(\"2305000000004\");\n    ProductScreen.check.selectedOrderlineHas('Magnetic Board', 1, \"0.00\");\n    ProductScreen.do.scan_ean13_barcode(\"2305000123451\");\n    ProductScreen.check.selectedOrderlineHas('Magnetic Board', 1, \"123.45\");\n\n    // Test \"Weighted product\" EAN-13 `21.....{NNDDD}` barcode pattern\n    ProductScreen.do.scan_ean13_barcode(\"2100005000000\");\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', 0, \"0.00\");\n    ProductScreen.do.scan_ean13_barcode(\"2100005080002\");\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', 8);\n\n\n    Tour.register('BarcodeScanningTour', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n\n    // Add the Product 1 with GS1 barcode\n    ProductScreen.do.scan_barcode(\"0108431673020125100000001\");\n    ProductScreen.check.selectedOrderlineHas('Product 1');\n    ProductScreen.do.scan_barcode(\"0108431673020125100000001\");\n    ProductScreen.check.selectedOrderlineHas('Product 1', 2);\n\n    // Add the Product 2 with normal barcode\n    ProductScreen.do.scan_barcode(\"08431673020126\");\n    ProductScreen.check.selectedOrderlineHas('Product 2');\n    ProductScreen.do.scan_barcode(\"08431673020126\");\n    ProductScreen.check.selectedOrderlineHas('Product 2', 2);\n\n    // Add the Product 3 with normal barcode\n    ProductScreen.do.scan_barcode(\"3760171283370\");\n    ProductScreen.check.selectedOrderlineHas('Product 3');\n    ProductScreen.do.scan_barcode(\"3760171283370\");\n    ProductScreen.check.selectedOrderlineHas('Product 3', 2);\n\n    Tour.register('GS1BarcodeScanningTour', { test: true, url: '/pos/ui' }, getSteps());\n});\n", "odoo.define('point_of_sale.tour.Chrome', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { TicketScreen } = require('point_of_sale.tour.TicketScreenTourMethods');\n    const { Chrome } = require('point_of_sale.tour.ChromeTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    Chrome.check.isCashMoveButtonShown();\n\n    // Order 1 is at Product Screen\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Desk Pad', '1', '2', '2.0');\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.checkStatus('-0001', 'Ongoing');\n\n    // Order 2 is at Payment Screen\n    TicketScreen.do.clickNewTicket();\n    ProductScreen.exec.addOrderline('Monitor Stand', '3', '4', '12.0');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.check.isShown();\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.checkStatus('-0002', 'Payment');\n\n    // Order 3 is at Receipt Screen\n    TicketScreen.do.clickNewTicket();\n    ProductScreen.exec.addOrderline('Whiteboard Pen', '5', '6', '30.0');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(true);\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.checkStatus('-0003', 'Receipt');\n\n    // Select order 1, should be at Product Screen\n    TicketScreen.do.selectOrder('-0001');\n    ProductScreen.check.productIsDisplayed('Desk Pad');\n    ProductScreen.check.selectedOrderlineHas('Desk Pad', '1.0', '2.0');\n\n    // Select order 2, should be at Payment Screen\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.selectOrder('-0002');\n    PaymentScreen.check.emptyPaymentlines('12.0');\n    PaymentScreen.check.validateButtonIsHighlighted(false);\n\n    // Select order 3, should be at Receipt Screen\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.selectOrder('-0003');\n    ReceiptScreen.check.totalAmountContains('30.0');\n\n    // Pay order 1, with change\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.selectOrder('-0001');\n    ProductScreen.check.isShown();\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('2 0');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(true);\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.totalAmountContains('2.0');\n\n    // Order 1 now should have Receipt status\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.checkStatus('-0001', 'Receipt');\n\n    // Select order 3, should still be at Receipt Screen\n    // and the total amount doesn't change.\n    TicketScreen.do.selectOrder('-0003');\n    ReceiptScreen.check.totalAmountContains('30.0');\n\n    // click next screen on order 3\n    // then delete the new empty order\n    ReceiptScreen.do.clickNextOrder();\n    ProductScreen.check.orderIsEmpty();\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.deleteOrder('-0004');\n    TicketScreen.do.deleteOrder('-0001');\n\n    // After deleting order 1 above, order 2 became\n    // the 2nd-row order and it has payment status\n    TicketScreen.check.nthRowContains(2, 'Payment')\n    TicketScreen.do.deleteOrder('-0002');\n    Chrome.do.confirmPopup();\n    TicketScreen.do.clickNewTicket();\n\n    // Invoice an order\n    ProductScreen.exec.addOrderline('Whiteboard Pen', '5', '6');\n    ProductScreen.do.clickPartnerButton();\n    ProductScreen.do.clickCustomer('Nicole Ford');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickInvoiceButton();\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n\n    Tour.register('ChromeTour', { test: true, url: '/pos/ui' }, getSteps());\n});\n", "/** @odoo-module **/\n\nimport { getSteps, startSteps } from \"point_of_sale.tour.utils\";\nimport { Chrome } from \"point_of_sale.tour.ChromeTourMethods\";\nimport Tour from \"web_tour.tour\";\n\nstartSteps();\n\nChrome.check.isCashMoveButtonHidden();\n\nTour.register('chrome_without_cash_move_permission', { test: true, url: '/pos/ui' }, getSteps());\n", "odoo.define('point_of_sale.tour.PaymentScreen', function (require) {\n    'use strict';\n\n    const { Chrome } = require('point_of_sale.tour.ChromeTourMethods');\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { TicketScreen } = require('point_of_sale.tour.TicketScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    ProductScreen.exec.addOrderline('Letter Tray', '10');\n    ProductScreen.check.selectedOrderlineHas('Letter Tray', '10.0');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.check.emptyPaymentlines('52.8');\n\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('1 1');\n    PaymentScreen.check.selectedPaymentlineHas('Cash', '11.00');\n    PaymentScreen.check.remainingIs('41.8');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(false);\n    // remove the selected paymentline with multiple backspace presses\n    PaymentScreen.do.pressNumpad('Backspace Backspace');\n    PaymentScreen.check.selectedPaymentlineHas('Cash', '0.00');\n    PaymentScreen.do.pressNumpad('Backspace');\n    PaymentScreen.check.emptyPaymentlines('52.8');\n\n    // Pay with bank, the selected line should have full amount\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(true);\n    // remove the line using the delete button\n    PaymentScreen.do.clickPaymentlineDelButton('Bank', '52.8');\n\n    // Use +10 and +50 to increment the amount of the paymentline\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('+10');\n    PaymentScreen.check.remainingIs('42.8');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(false);\n    PaymentScreen.do.pressNumpad('+50');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('7.2');\n    PaymentScreen.check.validateButtonIsHighlighted(true);\n    PaymentScreen.do.clickPaymentlineDelButton('Cash', '60.0');\n\n    // Multiple paymentlines\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('1');\n    PaymentScreen.check.remainingIs('51.8');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(false);\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('5');\n    PaymentScreen.check.remainingIs('46.8');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(false);\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.pressNumpad('2 0');\n    PaymentScreen.check.remainingIs('26.8');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(false);\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n    PaymentScreen.check.validateButtonIsHighlighted(true);\n\n    Tour.register('PaymentScreenTour', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Letter Tray', '1', '10');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.pressNumpad('1 0 0 0');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Tour.register('PaymentScreenTour2', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Product Test', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('2.00');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.clickNewTicket();\n\n    ProductScreen.exec.addOrderline('Product Test', '-1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('-2.00');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Tour.register('PaymentScreenRoundingUp', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Product Test', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('1.95');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.clickNewTicket();\n\n    ProductScreen.exec.addOrderline('Product Test', '-1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('-1.95');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Tour.register('PaymentScreenRoundingDown', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Product Test 1.2', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('1.00');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.clickNewTicket();\n\n    ProductScreen.exec.addOrderline('Product Test 1.25', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('1.5');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.clickNewTicket();\n\n    ProductScreen.exec.addOrderline('Product Test 1.4', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('1.5');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.clickNewTicket();\n\n    ProductScreen.exec.addOrderline('Product Test 1.2', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('1.00');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('2');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('1.0');\n\n    Tour.register('PaymentScreenRoundingHalfUp', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Product Test 40', '1');\n    ProductScreen.do.clickPartnerButton();\n    ProductScreen.do.clickCustomer('Nicole Ford');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('40.00');\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.pressNumpad('3 8');\n    PaymentScreen.check.remainingIs('2.0');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    PaymentScreen.do.clickInvoiceButton();\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.receiptIsThere();\n    ReceiptScreen.do.clickNextOrder();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Product Test 41', '1');\n    ProductScreen.do.clickPartnerButton();\n    ProductScreen.do.clickCustomer('Nicole Ford');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('41.00');\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.pressNumpad('3 8');\n    PaymentScreen.check.remainingIs('3.0');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('0.0');\n\n    PaymentScreen.do.clickInvoiceButton();\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.receiptIsThere();\n\n    Tour.register('PaymentScreenRoundingHalfUpCashAndBank', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Product Test', '1');\n    ProductScreen.do.clickPayButton();\n\n    PaymentScreen.check.totalIs('1.95');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('5');\n\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.check.changeIs('3.05');\n    PaymentScreen.check.totalDueIs('1.95');\n\n    Tour.register('PaymentScreenTotalDueWithOverPayment', { test: true, url: '/pos/ui' }, getSteps());\n\n});\n", "odoo.define('point_of_sale.tour.ProductConfigurator', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { ProductConfigurator } = require('point_of_sale.tour.ProductConfiguratorTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    // signal to start generating steps\n    // when finished, steps can be taken from getSteps\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    // Go by default to home category\n    ProductScreen.do.clickHomeCategory();\n\n    // Click on Configurable Chair product\n    ProductScreen.do.clickDisplayedProduct('Configurable Chair');\n    ProductConfigurator.check.isShown();\n\n    // Cancel configuration, not product should be in order\n    ProductConfigurator.do.cancelAttributes();\n    ProductScreen.check.orderIsEmpty();\n\n    // Click on Configurable Chair product\n    ProductScreen.do.clickDisplayedProduct('Configurable Chair');\n    ProductConfigurator.check.isShown();\n\n    // Pick Color\n    ProductConfigurator.do.pickColor('Red');\n\n    // Pick Radio\n    ProductConfigurator.do.pickSelect('Metal');\n\n    // Pick Select\n    ProductConfigurator.do.pickRadio('Other');\n\n    // Fill in custom attribute\n    ProductConfigurator.do.fillCustomAttribute('Custom Fabric');\n\n    // Confirm configuration\n    ProductConfigurator.do.confirmAttributes();\n\n    // Check that the product has been added to the order with correct attributes and price\n    ProductScreen.check.selectedOrderlineHas('Configurable Chair (Red, Metal, Other: Custom Fabric)', '1.0', '11.0');\n\n    // Orderlines with the same attributes should be merged\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickDisplayedProduct('Configurable Chair');\n    ProductConfigurator.do.pickColor('Red');\n    ProductConfigurator.do.pickSelect('Metal');\n    ProductConfigurator.do.pickRadio('Other');\n    ProductConfigurator.do.fillCustomAttribute('Custom Fabric');\n    ProductConfigurator.do.confirmAttributes();\n    ProductScreen.check.selectedOrderlineHas('Configurable Chair (Red, Metal, Other: Custom Fabric)', '2.0', '22.0');\n\n    // Orderlines with different attributes shouldn't be merged\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickDisplayedProduct('Configurable Chair');\n    ProductConfigurator.do.pickColor('Blue');\n    ProductConfigurator.do.pickSelect('Metal');\n    ProductConfigurator.do.pickRadio('Leather');\n    ProductConfigurator.do.confirmAttributes();\n    ProductScreen.check.selectedOrderlineHas('Configurable Chair (Blue, Metal, Leather)', '1.0', '10.0');\n\n    Tour.register('ProductConfiguratorTour', { test: true, url: '/pos/ui' }, getSteps());\n});\n", "odoo.define('point_of_sale.tour.ProductScreen', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { TextAreaPopup } = require('point_of_sale.tour.TextAreaPopupTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    // signal to start generating steps\n    // when finished, steps can be taken from getSteps\n    startSteps();\n\n    // Go by default to home category\n    ProductScreen.do.clickHomeCategory();\n\n    // Clicking product multiple times should increment quantity\n    ProductScreen.do.clickDisplayedProduct('Desk Organizer');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '1.0', '5.10');\n    ProductScreen.do.clickDisplayedProduct('Desk Organizer');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '2.0', '10.20');\n\n    // Clicking product should add new orderline and select the orderline\n    // If orderline exists, increment the quantity\n    ProductScreen.do.clickDisplayedProduct('Letter Tray');\n    ProductScreen.check.selectedOrderlineHas('Letter Tray', '1.0', '5.28');\n    ProductScreen.do.clickDisplayedProduct('Desk Organizer');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '3.0', '15.30');\n\n    // Check effects of clicking numpad buttons\n    ProductScreen.do.clickOrderline('Letter Tray', '1');\n    ProductScreen.check.selectedOrderlineHas('Letter Tray', '1.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Letter Tray', '0.0', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '3', '15.30');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '0.0', '0.0');\n    ProductScreen.do.pressNumpad('1');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '1.0', '5.1');\n    ProductScreen.do.pressNumpad('2');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '12.0', '61.2');\n    ProductScreen.do.pressNumpad('3');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '123.0', '627.3');\n    ProductScreen.do.pressNumpad('. 5');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '123.5', '629.85');\n    ProductScreen.do.pressNumpad('Price');\n    ProductScreen.do.pressNumpad('1');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '123.5', '123.5');\n    ProductScreen.do.pressNumpad('1 .');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '123.5', '1,358.5');\n    ProductScreen.do.pressNumpad('Disc');\n    ProductScreen.do.pressNumpad('5 .');\n    ProductScreen.check.selectedOrderlineHas('Desk Organizer', '123.5', '1,290.58');\n    ProductScreen.do.pressNumpad('Qty');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.orderIsEmpty();\n\n    // Check different subcategories\n    ProductScreen.do.clickSubcategory('Desks');\n    ProductScreen.check.productIsDisplayed('Desk Pad');\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickSubcategory('Miscellaneous');\n    ProductScreen.check.productIsDisplayed('Whiteboard Pen');\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickSubcategory('Chairs');\n    ProductScreen.check.productIsDisplayed('Letter Tray');\n    ProductScreen.do.clickHomeCategory();\n    \n    // Add two orderlines and update quantity\n    ProductScreen.do.clickDisplayedProduct('Whiteboard Pen');\n    ProductScreen.do.clickDisplayedProduct('Wall Shelf Unit');\n    ProductScreen.do.clickOrderline('Whiteboard Pen', '1.0');\n    ProductScreen.check.selectedOrderlineHas('Whiteboard Pen', '1.0');\n    ProductScreen.do.pressNumpad('2');\n    ProductScreen.check.selectedOrderlineHas('Whiteboard Pen', '2.0');\n    ProductScreen.do.clickOrderline('Wall Shelf Unit', '1.0');\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', '1.0');\n    ProductScreen.do.pressNumpad('2');\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', '2.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Whiteboard Pen', '2.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Whiteboard Pen', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.orderIsEmpty();\n\n    // Add multiple orderlines then delete each of them until empty\n    ProductScreen.do.clickDisplayedProduct('Whiteboard Pen');\n    ProductScreen.do.clickDisplayedProduct('Wall Shelf Unit');\n    ProductScreen.do.clickDisplayedProduct('Small Shelf');\n    ProductScreen.do.clickDisplayedProduct('Magnetic Board');\n    ProductScreen.do.clickDisplayedProduct('Monitor Stand');\n    ProductScreen.do.clickOrderline('Whiteboard Pen', '1.0');\n    ProductScreen.check.selectedOrderlineHas('Whiteboard Pen', '1.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Whiteboard Pen', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand', '1.0');\n    ProductScreen.do.clickOrderline('Wall Shelf Unit', '1.0');\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', '1.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Wall Shelf Unit', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand', '1.0');\n    ProductScreen.do.clickOrderline('Small Shelf', '1.0');\n    ProductScreen.check.selectedOrderlineHas('Small Shelf', '1.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Small Shelf', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand', '1.0');\n    ProductScreen.do.clickOrderline('Magnetic Board', '1.0');\n    ProductScreen.check.selectedOrderlineHas('Magnetic Board', '1.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Magnetic Board', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand', '1.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.selectedOrderlineHas('Monitor Stand', '0.0');\n    ProductScreen.do.pressNumpad('Backspace');\n    ProductScreen.check.orderIsEmpty();\n\n    // Test OrderlineCustomerNoteButton\n    ProductScreen.do.clickDisplayedProduct('Desk Organizer');\n    ProductScreen.do.clickOrderlineCustomerNoteButton();\n    TextAreaPopup.check.isShown();\n    TextAreaPopup.do.inputText('Test customer note');\n    TextAreaPopup.do.clickConfirm();\n    ProductScreen.check.orderlineHasCustomerNote('Desk Organizer', '1', 'Test customer note');\n\n\n    Tour.register('ProductScreenTour', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickDisplayedProduct('Test Product');\n    ProductScreen.check.totalAmountIs('100.00');\n    ProductScreen.do.changeFiscalPosition('No Tax');\n    ProductScreen.check.noDiscountApplied(\"100.00\");\n    ProductScreen.check.totalAmountIs('86.96');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.00');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    ReceiptScreen.check.noOrderlineContainsDiscount();\n\n    Tour.register('FiscalPositionNoTax', { test: true, url: '/pos/ui' }, getSteps());\n});\n\nodoo.define('point_of_sale.tour.FixedPriceNegativeQty', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n\n    ProductScreen.do.clickDisplayedProduct('Zero Amount Product');\n    ProductScreen.check.selectedOrderlineHas('Zero Amount Product', '1.0', '1.0');\n    ProductScreen.do.pressNumpad('+/- 1');\n    ProductScreen.check.selectedOrderlineHas('Zero Amount Product', '-1.0', '-1.0');\n\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.00');\n    PaymentScreen.do.clickValidate();\n\n    ReceiptScreen.check.receiptIsThere();\n\n    Tour.register('FixedTaxNegativeQty', { test: true, url: '/pos/ui' }, getSteps());\n});\n\nodoo.define('point_of_sale.tour.OpenCloseCashCount', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    ProductScreen.do.enterOpeningAmount('90');\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.check.checkSecondCashClosingDetailsLineAmount('10.00', '-');\n\n    Tour.register('CashClosingDetails', { test: true, url: '/pos/ui' }, getSteps());\n});\n\nodoo.define('point_of_sale.tour.RoundGloballyTax', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickDisplayedProduct('Test Product');\n    ProductScreen.check.totalAmountIs('115.00');\n\n    Tour.register('RoundGloballyAmoundTour', { test: true, url: '/pos/ui' }, getSteps());\n});\n\nodoo.define('point_of_sale.tour.ShowTaxExcludedTour', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n\n    ProductScreen.do.clickHomeCategory();\n\n    ProductScreen.do.clickDisplayedProduct('Test Product');\n    ProductScreen.check.selectedOrderlineHas('Test Product', '1.0', '100.0');\n    ProductScreen.check.totalAmountIs('110.0');\n\n    Tour.register('ShowTaxExcludedTour', { test: true, url: '/pos/ui' }, getSteps());\n});\n", "odoo.define('point_of_sale.tour.ReceiptScreen', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { NumberPopup } = require('point_of_sale.tour.NumberPopupTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    const Tour = require('web_tour.tour');\n\n    startSteps();\n\n    // press close button in receipt screen\n    ProductScreen.exec.addOrderline('Letter Tray', '10', '5');\n    ProductScreen.check.selectedOrderlineHas('Letter Tray', '10');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.validateButtonIsHighlighted(true);\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.receiptIsThere();\n    // letter tray has 10% tax (search SRC)\n    ReceiptScreen.check.totalAmountContains('55.0');\n    ReceiptScreen.do.clickNextOrder();\n\n    // send email in receipt screen\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Desk Pad', '6', '5', '30.0');\n    ProductScreen.exec.addOrderline('Whiteboard Pen', '6', '6', '36.0');\n    ProductScreen.exec.addOrderline('Monitor Stand', '6', '1', '6.0');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.pressNumpad('7 0');\n    PaymentScreen.check.remainingIs('2.0');\n    PaymentScreen.do.pressNumpad('0');\n    PaymentScreen.check.remainingIs('0.00');\n    PaymentScreen.check.changeIs('628.0');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.receiptIsThere();\n    ReceiptScreen.check.totalAmountContains('72.0');\n    ReceiptScreen.do.setEmail('test@receiptscreen.com');\n    ReceiptScreen.do.clickSend();\n    ReceiptScreen.check.emailIsSuccessful();\n    ReceiptScreen.do.clickNextOrder();\n\n    // order with tip\n    // check if tip amount is displayed\n    ProductScreen.exec.addOrderline('Desk Pad', '6', '5');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickTipButton();\n    NumberPopup.do.pressNumpad('1');\n    NumberPopup.check.inputShownIs('1');\n    NumberPopup.do.clickConfirm();\n    PaymentScreen.check.emptyPaymentlines('31.0');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.receiptIsThere();\n    ReceiptScreen.check.totalAmountContains('$ 30.00 + $ 1.00 tip');\n    ReceiptScreen.do.clickNextOrder();\n\n    // Test customer note in receipt\n    ProductScreen.exec.addOrderline('Desk Pad', '1', '5');\n    ProductScreen.exec.addCustomerNote('Test customer note')\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.customerNoteIsThere('Test customer note');\n\n    Tour.register('ReceiptScreenTour', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Test Product', '1');\n    ProductScreen.do.clickPricelistButton();\n    ProductScreen.do.selectPriceList('special_pricelist');\n    ProductScreen.check.discountOriginalPriceIs('7.0');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.discountAmountIs('0.7');\n\n    Tour.register('ReceiptScreenDiscountWithPricelistTour', { test: true, url: '/pos/ui' }, getSteps());\n});\n", "odoo.define('point_of_sale.tour.TicketScreen', function (require) {\n    'use strict';\n\n    const { ProductScreen } = require('point_of_sale.tour.ProductScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { PartnerListScreen } = require('point_of_sale.tour.PartnerListScreenTourMethods');\n    const { TicketScreen } = require('point_of_sale.tour.TicketScreenTourMethods');\n    const { ErrorPopup } = require('point_of_sale.tour.ErrorPopupTourMethods');\n    const { Chrome } = require('point_of_sale.tour.ChromeTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    var Tour = require('web_tour.tour');\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.exec.addOrderline('Desk Pad', '1', '2');\n    ProductScreen.do.clickPartnerButton();\n    ProductScreen.do.clickCustomer('Nicole Ford');\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.nthRowContains(2, 'Nicole Ford');\n    TicketScreen.do.clickNewTicket();\n    ProductScreen.exec.addOrderline('Desk Pad', '1', '3');\n    ProductScreen.do.clickPartnerButton();\n    ProductScreen.do.clickCustomer('Brandon Freeman');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.check.isShown();\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.nthRowContains(3, 'Brandon Freeman');\n    TicketScreen.do.clickNewTicket();\n    ProductScreen.exec.addOrderline('Desk Pad', '2', '4');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    Chrome.do.clickTicketButton();\n    TicketScreen.check.nthRowContains(4, 'Receipt');\n    TicketScreen.do.selectFilter('Receipt');\n    TicketScreen.check.nthRowContains(2, 'Receipt');\n    TicketScreen.do.selectFilter('Payment');\n    TicketScreen.check.nthRowContains(2, 'Payment');\n    TicketScreen.do.selectFilter('Ongoing');\n    TicketScreen.check.nthRowContains(2, 'Ongoing');\n    TicketScreen.do.selectFilter('All active orders');\n    TicketScreen.check.nthRowContains(4, 'Receipt');\n    TicketScreen.do.search('Customer', 'Nicole');\n    TicketScreen.check.nthRowContains(2, 'Nicole');\n    TicketScreen.do.search('Customer', 'Brandon');\n    TicketScreen.check.nthRowContains(2, 'Brandon');\n    TicketScreen.do.search('Receipt Number', '-0003');\n    TicketScreen.check.nthRowContains(2, 'Receipt');\n    // Close the TicketScreen to see the current order which is in ReceiptScreen.\n    // This is just to remove the search string in the search bar.\n    TicketScreen.do.clickDiscard();\n    ReceiptScreen.check.isShown();\n    // Open again the TicketScreen to check the Paid filter.\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.selectFilter('Paid');\n    TicketScreen.check.nthRowContains(2, '-0003');\n    // Pay the order that was in PaymentScreen.\n    TicketScreen.do.selectFilter('Payment');\n    TicketScreen.do.selectOrder('-0002');\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    ReceiptScreen.do.clickNextOrder();\n    ProductScreen.check.isShown();\n    // Check that the Paid filter will show the 2 synced orders.\n    Chrome.do.clickTicketButton();\n    TicketScreen.do.selectFilter('Paid');\n    TicketScreen.check.nthRowContains(2, 'Brandon Freeman');\n    TicketScreen.check.nthRowContains(3, '-0003');\n    // Invoice order\n    TicketScreen.do.selectOrder('-0003');\n    TicketScreen.check.orderWidgetIsNotEmpty();\n    TicketScreen.do.clickControlButton('Invoice');\n    Chrome.do.confirmPopup();\n    PartnerListScreen.check.isShown();\n    PartnerListScreen.do.clickPartner('Colleen Diaz');\n    TicketScreen.check.partnerIs('Colleen Diaz');\n    // Reprint receipt\n    TicketScreen.do.clickControlButton('Print Receipt');\n    ReceiptScreen.check.isShown();\n    ReceiptScreen.do.clickBack();\n    // When going back, the ticket screen should be in its previous state.\n    TicketScreen.check.filterIs('Paid');\n\n    // Test refund //\n    TicketScreen.do.clickDiscard();\n    ProductScreen.check.isShown();\n    ProductScreen.check.orderIsEmpty();\n    ProductScreen.do.clickRefund();\n    // Filter should be automatically 'Paid'.\n    TicketScreen.check.filterIs('Paid');\n    TicketScreen.do.selectOrder('-0003');\n    TicketScreen.check.partnerIs('Colleen Diaz');\n    TicketScreen.do.clickOrderline('Desk Pad');\n    TicketScreen.do.pressNumpad('3');\n    // Error should show because 2 is more than the number\n    // that can be refunded.\n    ErrorPopup.do.clickConfirm();\n    TicketScreen.do.clickDiscard();\n    ProductScreen.check.isShown();\n    ProductScreen.check.orderIsEmpty();\n    ProductScreen.do.clickRefund();\n    TicketScreen.do.selectOrder('-0003');\n    TicketScreen.do.clickOrderline('Desk Pad');\n    TicketScreen.do.pressNumpad('1');\n    TicketScreen.check.toRefundTextContains('To Refund: 1.00');\n    TicketScreen.do.confirmRefund();\n    ProductScreen.check.isShown();\n    ProductScreen.check.selectedOrderlineHas('Desk Pad', '-1.00');\n    // Try changing the refund line to positive number.\n    // Error popup should show.\n    ProductScreen.do.pressNumpad('2');\n    ErrorPopup.do.clickConfirm();\n    // Change the refund line quantity to -3 -- not allowed\n    // so error popup.\n    ProductScreen.do.pressNumpad('+/- 3');\n    ErrorPopup.do.clickConfirm();\n    // Change the refund line quantity to -2 -- allowed.\n    ProductScreen.do.pressNumpad('+/- 2');\n    ProductScreen.check.selectedOrderlineHas('Desk Pad', '-2.00');\n    // Check if the amount being refunded changed to 2.\n    ProductScreen.do.clickRefund();\n    TicketScreen.do.selectOrder('-0003');\n    TicketScreen.check.toRefundTextContains('Refunding 2.00');\n    TicketScreen.do.clickDiscard();\n    // Pay the refund order.\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    ReceiptScreen.do.clickNextOrder();\n    // Check refunded quantity.\n    ProductScreen.do.clickRefund();\n    TicketScreen.do.selectOrder('-0003');\n    TicketScreen.check.refundedNoteContains('2.00 Refunded');\n\n    Tour.register('TicketScreenTour', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickDisplayedProduct('Product Test');\n    ProductScreen.check.totalAmountIs('100.00');\n    ProductScreen.do.changeFiscalPosition('No Tax');\n    ProductScreen.check.totalAmountIs('86.96');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.00');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    ReceiptScreen.do.clickNextOrder();\n    ProductScreen.do.clickRefund();\n    TicketScreen.do.selectOrder('-0001');\n    TicketScreen.do.clickOrderline('Product Test');\n    TicketScreen.do.pressNumpad('1');\n    TicketScreen.check.toRefundTextContains('To Refund: 1.00');\n    TicketScreen.do.confirmRefund();\n    ProductScreen.check.isShown();\n    ProductScreen.check.totalAmountIs('-86.96');\n\n    Tour.register('FiscalPositionNoTaxRefund', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickHomeCategory();\n    ProductScreen.do.clickDisplayedProduct('Product A');\n    ProductScreen.do.enterLotNumber('123456789');\n    ProductScreen.check.selectedOrderlineHas('Product A', '1.00');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n    ReceiptScreen.do.clickNextOrder();\n    ProductScreen.do.clickRefund();\n    TicketScreen.do.selectOrder('-0001');\n    TicketScreen.do.clickOrderline('Product A');\n    TicketScreen.do.pressNumpad('1');\n    TicketScreen.check.toRefundTextContains('To Refund: 1.00');\n    TicketScreen.do.confirmRefund();\n    ProductScreen.check.isShown();\n    ProductScreen.do.clickLotIcon();\n    ProductScreen.check.checkFirstLotNumber('123456789');\n\n    Tour.register('LotRefundTour', { test: true, url: '/pos/ui' }, getSteps());\n\n});\n", "odoo.define('point_of_sale.tour.ChromeTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        confirmPopup() {\n            return [\n                {\n                    content: 'confirm popup',\n                    trigger: '.popups .modal-dialog .button.confirm',\n                },\n            ];\n        }\n        clickTicketButton() {\n            return [\n                {\n                    trigger: '.pos-topheader .ticket-button',\n                },\n                {\n                    trigger: '.subwindow .ticket-screen',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isCashMoveButtonHidden() {\n            return [\n                {\n                    trigger: '.pos-topheader:not(:contains(Cash In/Out))',\n                    run: () => {},\n                }\n            ];\n        }\n\n        isCashMoveButtonShown() {\n            return [\n                {\n                    trigger: '.pos-topheader:contains(Cash In/Out)',\n                    run: () => {},\n                }\n            ];\n        }\n    }\n\n    return createTourMethods('Chrome', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.ErrorPopupTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        clickConfirm() {\n            return [\n                {\n                    content: 'click confirm button',\n                    trigger: '.popup-error .footer .cancel',\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'error popup is shown',\n                    trigger: '.modal-dialog .popup-error',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    return createTourMethods('ErrorPopup', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.NumberPopupTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        /**\n         * Note: Maximum of 2 characters because NumberBuffer only allows 2 consecutive\n         * fast inputs. Fast inputs is the case in tours.\n         *\n         * @param {String} keys space-separated input keys\n         */\n        pressNumpad(keys) {\n            const numberChars = '0 1 2 3 4 5 6 7 8 9 C'.split(' ');\n            const modeButtons = '+1 +10 +2 +20 +5 +50'.split(' ');\n            const decimalSeparators = ', .'.split(' ');\n            function generateStep(key) {\n                let trigger;\n                if (numberChars.includes(key)) {\n                    trigger = `.popup-numpad .number-char:contains(\"${key}\")`;\n                } else if (modeButtons.includes(key)) {\n                    trigger = `.popup-numpad .mode-button:contains(\"${key}\")`;\n                } else if (key === 'Backspace') {\n                    trigger = `.popup-numpad .numpad-backspace`;\n                } else if (decimalSeparators.includes(key)) {\n                    trigger = `.popup-numpad .number-char.dot`;\n                }\n                return {\n                    content: `'${key}' pressed in numpad`,\n                    trigger,\n                };\n            }\n            return keys.split(' ').map(generateStep);\n        }\n        clickConfirm() {\n            return [\n                {\n                    content: 'click confirm button',\n                    trigger: '.popup-number .footer .confirm',\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'number popup is shown',\n                    trigger: '.modal-dialog .popup-number',\n                    run: () => {},\n                },\n            ];\n        }\n        inputShownIs(val) {\n            return [\n                {\n                    content: 'number input element check',\n                    trigger: '.modal-dialog .popup-number .popup-input',\n                    run: () => {},\n                },\n                {\n                    content: `input shown is '${val}'`,\n                    trigger: `.modal-dialog .popup-number .popup-input:contains(\"${val}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    return createTourMethods('NumberPopup', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.PartnerListScreenTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        clickPartner(name) {\n            return [\n                {\n                    content: `click partner '${name}' from partner list screen`,\n                    trigger: `.partnerlist-screen .partner-list-contents .partner-line td:contains(\"${name}\")`,\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'partner list screen is shown',\n                    trigger: '.pos-content .partnerlist-screen',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    class Execute {}\n\n    return createTourMethods('PartnerListScreen', Do, Check, Execute);\n});\n", "odoo.define('point_of_sale.tour.PaymentScreenTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        clickPaymentMethod(name) {\n            return [\n                {\n                    content: `click '${name}' payment method`,\n                    trigger: `.paymentmethods .button.paymentmethod:contains(\"${name}\")`,\n                },\n            ];\n        }\n\n        /**\n         * Delete the paymentline having the given payment method name and amount.\n         * @param {String} name payment method\n         * @param {String} amount\n         */\n        clickPaymentlineDelButton(name, amount) {\n            return [\n                {\n                    content: `delete ${name} paymentline with ${amount} amount`,\n                    trigger: `.paymentlines .paymentline .payment-name:contains(\"${name}\") ~ .delete-button`,\n                },\n            ];\n        }\n\n        clickEmailButton() {\n            return [\n                {\n                    content: `click email button`,\n                    trigger: `.payment-buttons .js_email`,\n                },\n            ];\n        }\n\n        clickInvoiceButton() {\n            return [{ content: 'click invoice button', trigger: '.payment-buttons .js_invoice' }];\n        }\n\n        clickValidate() {\n            return [\n                {\n                    content: 'validate payment',\n                    trigger: `.payment-screen .button.next.highlight`,\n                },\n            ];\n        }\n\n        /**\n         * Press the numpad in sequence based on the given space-separated keys.\n         * Note: Maximum of 2 characters because NumberBuffer only allows 2 consecutive\n         * fast inputs. Fast inputs is the case in tours.\n         *\n         * @param {String} keys space-separated numpad keys\n         */\n        pressNumpad(keys) {\n            const numberChars = '. +/- 0 1 2 3 4 5 6 7 8 9'.split(' ');\n            const modeButtons = '+10 +20 +50'.split(' ');\n            function generateStep(key) {\n                let trigger;\n                if (numberChars.includes(key)) {\n                    trigger = `.payment-numpad .number-char:contains(\"${key}\")`;\n                } else if (modeButtons.includes(key)) {\n                    trigger = `.payment-numpad .mode-button:contains(\"${key}\")`;\n                } else if (key === 'Backspace') {\n                    trigger = `.payment-numpad .number-char img[alt=\"Backspace\"]`;\n                }\n                return {\n                    content: `'${key}' pressed in payment numpad`,\n                    trigger,\n                };\n            }\n            return keys.split(' ').map(generateStep);\n        }\n\n        clickBack() {\n            return [\n                {\n                    content: 'click back button',\n                    trigger: '.payment-screen .button.back',\n                },\n            ];\n        }\n\n        clickTipButton() {\n            return [\n                {\n                    trigger: '.payment-screen .button.js_tip',\n                },\n            ]\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'payment screen is shown',\n                    trigger: '.pos .payment-screen',\n                    run: () => {},\n                },\n            ];\n        }\n        /**\n         * Check if change is the provided amount.\n         * @param {String} amount\n         */\n        changeIs(amount) {\n            return [\n                {\n                    content: `change is ${amount}`,\n                    trigger: `.payment-status-change .amount:contains(\"${amount}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        /**\n         * Check if the remaining is the provided amount.\n         * @param {String} amount\n         */\n        remainingIs(amount) {\n            return [\n                {\n                    content: `remaining amount is ${amount}`,\n                    trigger: `.payment-status-remaining .amount:contains(\"${amount}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        /**\n         * Check if validate button is highlighted.\n         * @param {Boolean} isHighlighted\n         */\n        validateButtonIsHighlighted(isHighlighted = true) {\n            return [\n                {\n                    content: `validate button is ${\n                        isHighlighted ? 'highlighted' : 'not highligted'\n                    }`,\n                    trigger: isHighlighted\n                        ? `.payment-screen .button.next.highlight`\n                        : `.payment-screen .button.next:not(:has(.highlight))`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        /**\n         * Check if the paymentlines are empty. Also provide the amount to pay.\n         * @param {String} amountToPay\n         */\n        emptyPaymentlines(amountToPay) {\n            return [\n                {\n                    content: `there are no paymentlines`,\n                    trigger: `.paymentlines-empty`,\n                    run: () => {},\n                },\n                {\n                    content: `amount to pay is '${amountToPay}'`,\n                    trigger: `.paymentlines-empty .total:contains(\"${amountToPay}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        /**\n         * Check if the selected paymentline has the given payment method and amount.\n         * @param {String} paymentMethodName\n         * @param {String} amount\n         */\n        selectedPaymentlineHas(paymentMethodName, amount) {\n            return [\n                {\n                    content: `line paid via '${paymentMethodName}' is selected`,\n                    trigger: `.paymentlines .paymentline.selected .payment-name:contains(\"${paymentMethodName}\")`,\n                    run: () => {},\n                },\n                {\n                    content: `amount tendered in the line is '${amount}'`,\n                    trigger: `.paymentlines .paymentline.selected .payment-amount:contains(\"${amount}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        totalIs(amount) {\n            return [\n                {\n                    content: `total is ${amount}`,\n                    trigger: `.total:contains(\"${amount}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        totalDueIs(amount) {\n            return [\n                {\n                    content: `total due is ${amount}`,\n                    trigger: `.payment-status-total-due:contains(\"${amount}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    class Execute {\n        pay(method, amount) {\n            const steps = [];\n            steps.push(...this._do.clickPaymentMethod(method));\n            for (let char of amount.split('')) {\n                steps.push(...this._do.pressNumpad(char));\n            }\n            steps.push(...this._check.validateButtonIsHighlighted());\n            steps.push(...this._do.clickValidate());\n            return steps;\n        }\n    }\n\n    return createTourMethods('PaymentScreen', Do, Check, Execute);\n});\n", "odoo.define('point_of_sale.tour.ProductConfiguratorTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        pickRadio(name) {\n            return [\n                {\n                    content: `picking radio attribute with name ${name}`,\n                    trigger: `.product-configurator-popup .attribute-name-cell label:contains('${name}')`,\n                },\n            ];\n        }\n\n        pickSelect(name) {\n            return [\n                {\n                    content: `picking select attribute with name ${name}`,\n                    trigger: `.product-configurator-popup .configurator_select:has(option:contains('${name}'))`,\n                    run: `text ${name}`,\n                },\n            ];\n        }\n\n        pickColor(name) {\n            return [\n                {\n                    content: `picking color attribute with name ${name}`,\n                    trigger: `.product-configurator-popup .configurator_color[data-color='${name}']`,\n                },\n            ];\n        }\n\n        fillCustomAttribute(value) {\n            return [\n                {\n                    content: `filling custom attribute with value ${value}`,\n                    trigger: `.product-configurator-popup .custom_value`,\n                    run: `text ${value}`,\n                },\n            ];\n        }\n\n        confirmAttributes() {\n            return [\n                {\n                    content: `confirming product configuration`,\n                    trigger: `.product-configurator-popup .button.confirm`,\n                },\n            ];\n        }\n\n        cancelAttributes() {\n            return [\n                {\n                    content: `canceling product configuration`,\n                    trigger: `.product-configurator-popup .button.cancel`,\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'product configurator is shown',\n                    trigger: '.product-configurator-popup:not(:has(.oe_hidden))',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    return createTourMethods('ProductConfigurator', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.ProductScreenTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n    const { TextAreaPopup } = require('point_of_sale.tour.TextAreaPopupTourMethods');\n\n    class Do {\n        clickDisplayedProduct(name) {\n            return [\n                {\n                    content: `click product '${name}'`,\n                    trigger: `.product-list .product-name:contains(\"${name}\")`,\n                },\n            ];\n        }\n\n        clickOrderline(name, quantity) {\n            return [\n                {\n                    content: `selecting orderline with product '${name}' and quantity '${quantity}'`,\n                    trigger: `.order .orderline:not(:has(.selected)) .product-name:contains(\"${name}\") ~ .info-list em:contains(\"${quantity}\")`,\n                },\n                {\n                    content: `orderline with product '${name}' and quantity '${quantity}' has been selected`,\n                    trigger: `.order .orderline.selected .product-name:contains(\"${name}\") ~ .info-list em:contains(\"${quantity}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        clickSubcategory(name) {\n            return [\n                {\n                    content: `selecting '${name}' subcategory`,\n                    trigger: `.products-widget > .products-widget-control .category-simple-button:contains(\"${name}\")`,\n                },\n                {\n                    content: `'${name}' subcategory selected`,\n                    trigger: `.breadcrumbs .breadcrumb-button:contains(\"${name}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        clickHomeCategory() {\n            return [\n                {\n                    content: `click Home subcategory`,\n                    trigger: `.breadcrumbs .breadcrumb-home`,\n                },\n            ];\n        }\n\n        /**\n         * Press the numpad in sequence based on the given space-separated keys.\n         * NOTE: Maximum of 2 characters because NumberBuffer only allows 2 consecutive\n         * fast inputs. Fast inputs is the case in tours.\n         *\n         * @param {String} keys space-separated numpad keys\n         */\n        pressNumpad(keys) {\n            const numberChars = '. 0 1 2 3 4 5 6 7 8 9'.split(' ');\n            const modeButtons = 'Qty Price Disc'.split(' ');\n            function generateStep(key) {\n                let trigger;\n                if (numberChars.includes(key)) {\n                    trigger = `.numpad .number-char:contains(\"${key}\")`;\n                } else if (modeButtons.includes(key)) {\n                    trigger = `.numpad .mode-button:contains(\"${key}\")`;\n                } else if (key === 'Backspace') {\n                    trigger = `.numpad .numpad-backspace`;\n                } else if (key === '+/-') {\n                    trigger = `.numpad .numpad-minus`;\n                }\n                return {\n                    content: `'${key}' pressed in product screen numpad`,\n                    trigger,\n                };\n            }\n            return keys.split(' ').map(generateStep);\n        }\n\n        clickPayButton(shouldCheck = true) {\n            const steps = [{ content: 'click pay button', trigger: '.product-screen .actionpad .button.pay' }];\n            if (shouldCheck) {\n                steps.push({\n                    content: 'now in payment screen',\n                    trigger: '.pos-content .payment-screen',\n                    run: () => {},\n                });\n            }\n            return steps;\n        }\n\n        clickPartnerButton() {\n            return [\n                { content: 'click customer button', trigger: '.actionpad .button.set-partner' },\n                {\n                    content: 'partner screen is shown',\n                    trigger: '.pos-content .partnerlist-screen',\n                    run: () => {},\n                },\n            ];\n        }\n\n        clickCustomer(name) {\n            return [\n                {\n                    content: `select customer '${name}'`,\n                    trigger: `.partnerlist-screen .partner-line td:contains(\"${name}\")`,\n                },\n            ];\n        }\n\n        clickOrderlineCustomerNoteButton() {\n            return [\n                {\n                    content: 'click customer note button',\n                    trigger: '.control-buttons .control-button span:contains(\"Customer Note\")',\n                }\n            ]\n        }\n        clickRefund() {\n            return [\n                {\n                    trigger: '.control-button:contains(\"Refund\")',\n                },\n            ];\n        }\n        confirmOpeningPopup() {\n            return [{ trigger: '.opening-cash-control .button:contains(\"Open session\")' }];\n        }\n        clickPricelistButton() {\n            return [{ trigger: '.o_pricelist_button' }];\n        }\n        selectPriceList(name) {\n            return [\n                {\n                    content: `select price list '${name}'`,\n                    trigger: `.selection-item:contains(\"${name}\")`,\n                },\n            ];\n        }\n        enterOpeningAmount(amount) {\n            return [\n                {\n                    content: 'enter opening amount',\n                    trigger: '.cash-input-sub-section > .pos-input',\n                    run: 'text ' + amount,\n                },\n            ];\n        }\n        changeFiscalPosition(name) {\n            return [\n                {\n                    content: 'click fiscal position button',\n                    trigger: '.o_fiscal_position_button',\n                },\n                {\n                    content: 'fiscal position screen is shown',\n                    trigger: `.selection-item:contains(\"${name}\")`,\n                },\n            ];\n        }\n        scan_barcode(barcode) {\n            return [\n                {\n                    content: `input barcode '${barcode}'`,\n                    trigger: \"input.ean\",\n                    run: `text ${barcode}`,\n                },\n                {\n                    content: `button scan barcode '${barcode}'`,\n                    trigger: \"li.barcode\",\n                    run: 'click',\n                }\n            ];\n        }\n        scan_ean13_barcode(barcode) {\n            return [\n                {\n                    content: `input barcode '${barcode}'`,\n                    trigger: \"input.ean\",\n                    run: `text ${barcode}`,\n                },\n                {\n                    content: `button scan EAN-13 barcode '${barcode}'`,\n                    trigger: \"li.custom_ean\",\n                    run: 'click',\n                }\n            ];\n        }\n        clickLotIcon() {\n            return [\n                {\n                    content: 'click lot icon',\n                    trigger: '.line-lot-icon',\n                },\n            ];\n        }\n        enterLotNumber(number) {\n            return [\n                {\n                    content: 'enter lot number',\n                    trigger: '.list-line-input:first()',\n                    run: 'text ' + number,\n                },\n                {\n                    content: 'click validate lot number',\n                    trigger: '.popup .button.confirm',\n                }\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'product screen is shown',\n                    trigger: '.product-screen',\n                    run: () => {},\n                },\n            ];\n        }\n        selectedOrderlineHas(name, quantity, price) {\n            const res = [\n                {\n                    // check first if the order widget is there and has orderlines\n                    content: 'order widget has orderlines',\n                    trigger: '.order .orderlines',\n                    run: () => {},\n                },\n                {\n                    content: `'${name}' is selected`,\n                    trigger: `.order .orderline.selected .product-name:contains(\"${name}\")`,\n                    run: function () {}, // it's a check\n                },\n            ];\n            if (quantity) {\n                res.push({\n                    content: `selected line has ${quantity} quantity`,\n                    trigger: `.order .orderline.selected .product-name:contains(\"${name}\") ~ .info-list em:contains(\"${quantity}\")`,\n                    run: function () {}, // it's a check\n                });\n            }\n            if (price) {\n                res.push({\n                    content: `selected line has total price of ${price}`,\n                    trigger: `.order .orderline.selected .product-name:contains(\"${name}\") ~ .price:contains(\"${price}\")`,\n                    run: function () {}, // it's a check\n                });\n            }\n            return res;\n        }\n        orderIsEmpty() {\n            return [\n                {\n                    content: `order is empty`,\n                    trigger: `.order .order-empty`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        productIsDisplayed(name) {\n            return [\n                {\n                    content: `'${name}' should be displayed`,\n                    trigger: `.product-list .product-name:contains(\"${name}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        totalAmountIs(amount) {\n            return [\n                {\n                    content: `order total amount is '${amount}'`,\n                    trigger: `.order-container .order .summary .value:contains(\"${amount}\")`,\n                    run: () => {},\n                }\n            ]\n        }\n        modeIsActive(mode) {\n            return [\n                {\n                    content: `'${mode}' is active`,\n                    trigger: `.numpad button.selected-mode:contains('${mode}')`,\n                    run: function () {},\n                },\n            ];\n        }\n        orderlineHasCustomerNote(name, quantity, note) {\n            return [\n                {\n                    content: `line has ${quantity} quantity`,\n                    trigger: `.order .orderline .product-name:contains(\"${name}\") ~ .info-list em:contains(\"${quantity}\")`,\n                    run: function () {}, // it's a check\n                },\n                {\n                    content: `line has '${note}' as customer note`,\n                    trigger: `.order .orderline .info-list .orderline-note:contains(\"${note}\")`,\n                    run: function () {}, // it's a check\n                },\n            ]\n        }\n        checkSecondCashClosingDetailsLineAmount(amount, sign) {\n            return [\n                {\n                    content: 'Click close session button',\n                    trigger: '.fa-sign-out',\n                },\n                {\n                    content: 'Check closing details',\n                    trigger: `.cash-overview tr:nth-child(2) td:contains(\"${amount}\")`,\n                    run: () => {}, // it's a check\n                },\n                {\n                    content: 'Check closing details',\n                    trigger: `.cash-overview tr:nth-child(2) .cash-sign:contains(\"${sign}\")`,\n                    run: () => {}, // it's a check\n                },\n            ];\n        }\n        noDiscountApplied(originalPrice) {\n            return [\n                {\n                    content: 'no discount is applied',\n                    trigger: `.info:not(:contains(${originalPrice}))`,\n                },\n            ];\n        }\n        discountOriginalPriceIs(original_price) {\n            return [\n                {\n                    content: `discount original price is shown`,\n                    trigger: `s:contains('${original_price}')`,\n                    run: function () {},\n                },\n            ];\n        }\n        checkFirstLotNumber(number) {\n            return [\n                {\n                    content: 'Check lot number',\n                    trigger: `.list-line-input:propValue('${number}')`,\n                    run: () => {}, // it's a check\n                },\n            ];\n        }\n    }\n\n    class Execute {\n        /**\n         * Create an orderline for the given `productName` and `quantity`.\n         * - If `unitPrice` is provided, price of the product of the created line\n         *   is changed to that value.\n         * - If `expectedTotal` is provided, the created orderline (which is the currently\n         *   selected orderline) is checked if it contains the correct quantity and total\n         *   price.\n         *\n         * @param {string} productName\n         * @param {string} quantity\n         * @param {string} unitPrice\n         * @param {string} expectedTotal\n         */\n        addOrderline(productName, quantity, unitPrice = undefined, expectedTotal = undefined) {\n            const res = this._do.clickDisplayedProduct(productName);\n            if (unitPrice) {\n                res.push(...this._do.pressNumpad('Price'));\n                res.push(...this._check.modeIsActive('Price'));\n                res.push(...this._do.pressNumpad(unitPrice.toString().split('').join(' ')));\n                res.push(...this._do.pressNumpad('Qty'));\n                res.push(...this._check.modeIsActive('Qty'));\n            }\n            for (let char of (quantity.toString() == '1' ? '' : quantity.toString())) {\n                if ('.0123456789'.includes(char)) {\n                    res.push(...this._do.pressNumpad(char));\n                } else if ('-'.includes(char)) {\n                    res.push(...this._do.pressNumpad('+/-'));\n                }\n            }\n            if (expectedTotal) {\n                res.push(...this._check.selectedOrderlineHas(productName, quantity, expectedTotal));\n            } else {\n                res.push(...this._check.selectedOrderlineHas(productName, quantity));\n            }\n            return res;\n        }\n        addMultiOrderlines(...list) {\n            const steps = [];\n            for (let [product, qty, price] of list) {\n                steps.push(...this.addOrderline(product, qty, price));\n            }\n            return steps;\n        }\n        addCustomerNote(note) {\n            const res = [];\n            res.push(...this._do.clickOrderlineCustomerNoteButton());\n            res.push(...TextAreaPopup._do.inputText(note));\n            res.push(...TextAreaPopup._do.clickConfirm());\n            return res;\n        }\n    }\n\n    return createTourMethods('ProductScreen', Do, Check, Execute);\n});\n", "odoo.define('point_of_sale.tour.ReceiptScreenTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        clickNextOrder() {\n            return [\n                {\n                    content: 'go to next screen',\n                    trigger: '.receipt-screen .button.next.highlight',\n                },\n            ];\n        }\n        setEmail(email) {\n            return [\n                {\n                    trigger: '.receipt-screen .input-email input',\n                    run: `text ${email}`,\n                },\n            ];\n        }\n        clickSend(isHighlighted = true) {\n            return [\n                {\n                    trigger: `.receipt-screen .input-email .send${isHighlighted ? '.highlight' : ''}`,\n                },\n            ];\n        }\n        clickBack() {\n            return [\n                {\n                    trigger: '.receipt-screen .button.back',\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'receipt screen is shown',\n                    trigger: '.pos .receipt-screen',\n                    run: () => {},\n                },\n            ];\n        }\n\n        receiptIsThere() {\n            return [\n                {\n                    content: 'there should be the receipt',\n                    trigger: '.receipt-screen .pos-receipt',\n                    run: () => {},\n                },\n            ];\n        }\n\n        totalAmountContains(value) {\n            return [\n                {\n                    trigger: `.receipt-screen .top-content h1:contains(\"${value}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        emailIsSuccessful() {\n            return [\n                {\n                    trigger: `.receipt-screen .notice .successful`,\n                    run: () => {},\n                },\n            ];\n        }\n\n        customerNoteIsThere(note) {\n            return [\n                {\n                    trigger: `.receipt-screen .orderlines .pos-receipt-left-padding:contains(\"${note}\")`\n                }\n            ]\n        }\n        discountAmountIs(value) {\n            return [\n                {\n                    trigger: `.pos-receipt>div:contains(\"Discounts\")>span:contains(\"${value}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        noOrderlineContainsDiscount() {\n            return [\n                {\n                    trigger: `.orderlines:not(:contains('->'))`,\n                    run: () => { },\n                },\n            ];\n        }\n    }\n\n    class Execute {\n        nextOrder() {\n            return [...this._check.isShown(), ...this._do.clickNextOrder()];\n        }\n    }\n\n    return createTourMethods('ReceiptScreen', Do, Check, Execute);\n});\n", "odoo.define('point_of_sale.tour.SelectionPopupTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        clickItem(name) {\n            return [\n                {\n                    content: `click selection '${name}'`,\n                    trigger: `.selection-item:contains(\"${name}\")`,\n                },\n            ];\n        }\n    }\n\n    class Check {\n        hasSelectionItem(name) {\n            return [\n                {\n                    content: `selection popup has '${name}'`,\n                    trigger: `.selection-item:contains(\"${name}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        isShown() {\n            return [\n                {\n                    content: 'selection popup is shown',\n                    trigger: '.modal-dialog .popup-selection',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    return createTourMethods('SelectionPopup', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.TextAreaPopupTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        inputText(val) {\n            return [\n                {\n                    content: `input text '${val}'`,\n                    trigger: `.modal-dialog .popup-textarea textarea`,\n                    run: `text ${val}`,\n                },\n            ];\n        }\n        clickConfirm() {\n            return [\n                {\n                    content: 'confirm text input popup',\n                    trigger: '.modal-dialog .confirm',\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'text input popup is shown',\n                    trigger: '.modal-dialog .popup-textarea',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    return createTourMethods('TextAreaPopup', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.TextInputPopupTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        inputText(val) {\n            return [\n                {\n                    content: `input text '${val}'`,\n                    trigger: `.modal-dialog .popup-textinput input`,\n                    run: `text ${val}`,\n                },\n            ];\n        }\n        clickConfirm() {\n            return [\n                {\n                    content: 'confirm text input popup',\n                    trigger: '.modal-dialog .confirm',\n                },\n            ];\n        }\n    }\n\n    class Check {\n        isShown() {\n            return [\n                {\n                    content: 'text input popup is shown',\n                    trigger: '.modal-dialog .popup-textinput',\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    return createTourMethods('TextInputPopup', Do, Check);\n});\n", "odoo.define('point_of_sale.tour.TicketScreenTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n\n    class Do {\n        clickNewTicket() {\n            return [{ trigger: '.ticket-screen .highlight' }];\n        }\n        clickDiscard() {\n            return [{ trigger: '.ticket-screen button.discard' }];\n        }\n        selectOrder(orderName) {\n            return [\n                {\n                    trigger: `.ticket-screen .order-row > .col:nth-child(2):contains(\"${orderName}\")`,\n                },\n            ];\n        }\n        deleteOrder(orderName) {\n            return [\n                {\n                    trigger: `.ticket-screen .orders > .order-row > .col:contains(\"${orderName}\") ~ .col[name=\"delete\"]`,\n                },\n            ];\n        }\n        selectFilter(name) {\n            return [\n                {\n                    trigger: `.pos-search-bar .filter`,\n                },\n                {\n                    trigger: `.pos-search-bar .filter ul`,\n                    run: () => {},\n                },\n                {\n                    trigger: `.pos-search-bar .filter ul li:contains(\"${name}\")`,\n                },\n            ];\n        }\n        search(field, searchWord) {\n            return [\n                {\n                    trigger: '.pos-search-bar input',\n                    run: `text ${searchWord}`,\n                },\n                {\n                    /**\n                     * Manually trigger keyup event to show the search field list\n                     * because the previous step do not trigger keyup event.\n                     */\n                    trigger: '.pos-search-bar input',\n                    run: function () {\n                        document\n                            .querySelector('.pos-search-bar input')\n                            .dispatchEvent(new KeyboardEvent('keyup', { key: '' }));\n                    },\n                },\n                {\n                    trigger: `.pos-search-bar .search ul li:contains(\"${field}\")`,\n                },\n            ];\n        }\n        settleTips() {\n            return [\n                {\n                    trigger: '.ticket-screen .buttons .settle-tips',\n                },\n            ];\n        }\n        clickControlButton(name) {\n            return [\n                {\n                    trigger: `.ticket-screen .control-button:contains(\"${name}\")`,\n                },\n            ];\n        }\n        clickOrderline(name) {\n            return [\n                {\n                    trigger: `.ticket-screen .orderline:not(:has(.selected)) .product-name:contains(\"${name}\")`,\n                },\n                {\n                    trigger: `.ticket-screen .orderline.selected .product-name:contains(\"${name}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        pressNumpad(key) {\n            let trigger;\n            if ('.0123456789'.includes(key)) {\n                trigger = `.numpad .number-char:contains(\"${key}\")`;\n            } else if (key === 'Backspace') {\n                trigger = `.numpad .numpad-backspace`;\n            } else if (key === '+/-') {\n                trigger = `.numpad .numpad-minus`;\n            }\n            return [\n                {\n                    trigger,\n                },\n            ];\n        }\n        confirmRefund() {\n            return [\n                {\n                    trigger: '.ticket-screen .button.pay',\n                },\n            ];\n        }\n    }\n\n    class Check {\n        checkStatus(orderName, status) {\n            return [\n                {\n                    trigger: `.ticket-screen .order-row > .col:nth-child(2):contains(\"${orderName}\") ~ .col:nth-child(6):contains(${status})`,\n                    run: () => {},\n                },\n            ];\n        }\n        /**\n         * Check if the nth row contains the given string.\n         * Note that 1st row is the header-row.\n         */\n        nthRowContains(n, string) {\n            return [\n                {\n                    trigger: `.ticket-screen .orders > .order-row:nth-child(${n}):contains(\"${string}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        noNewTicketButton() {\n            return [\n                {\n                    trigger: '.ticket-screen .controls .buttons:nth-child(1):has(.discard)',\n                    run: () => {},\n                },\n            ];\n        }\n        orderWidgetIsNotEmpty() {\n            return [\n                {\n                    trigger: '.ticket-screen:not(:has(.order-empty))',\n                    run: () => {},\n                },\n            ];\n        }\n        filterIs(name) {\n            return [\n                {\n                    trigger: `.ticket-screen .pos-search-bar .filter span:contains(\"${name}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        partnerIs(name) {\n            return [\n                {\n                    trigger: `.ticket-screen .set-partner:contains(\"${name}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        toRefundTextContains(text) {\n            return [\n                {\n                    trigger: `.ticket-screen .to-refund-highlight:contains(\"${text}\")`,\n                    run: () => {},\n               },\n            ];\n        }\n        refundedNoteContains(text) {\n            return [\n                {\n                    trigger: `.ticket-screen .refund-note:contains(\"${text}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n        tipContains(amount) {\n            return [\n                {\n                    trigger: `.ticket-screen .tip-cell:contains(\"${amount}\")`,\n                    run: () => {},\n                },\n            ];\n        }\n    }\n\n    class Execute {}\n\n    return createTourMethods('TicketScreen', Do, Check, Execute);\n});\n", "odoo.define('point_of_sale.tour.utils', function (require) {\n    'use strict';\n\n    const config = require('web.config');\n\n    /**\n     * USAGE\n     * -----\n     *\n     * ```\n     * const { startSteps, getSteps, createTourMethods } = require('point_of_sale.utils');\n     * const { Other } = require('point_of_sale.tour.OtherMethods');\n     *\n     * // 1. Define classes Do, Check and Execute having methods that\n     * //    each return array of tour steps.\n     * class Do {\n     *   click() {\n     *      return [{ content: 'click button', trigger: '.button' }];\n     *   }\n     * }\n     * class Check {\n     *   isHighligted() {\n     *      return [{ content: 'button is highlighted', trigger: '.button.highlight', run: () => {} }];\n     *   }\n     * }\n     * // Notice that Execute has access to methods defined in Do and Check classes\n     * // Also, we can compose steps from other module.\n     * class Execute {\n     *   complexSteps() {\n     *      return [...this._do.click(), ...this._check.isHighlighted(), ...Other._exec.complicatedSteps()];\n     *   }\n     * }\n     *\n     * // 2. Instantiate these class definitions using `createTourMethods`.\n     * //    The returned object gives access to the defined methods above\n     * //    thru the do, check and exec properties.\n     * //    - do gives access to the methods defined in Do class\n     * //    - check gives access to the methods defined in Check class\n     * //    - exec gives access to the methods defined in Execute class\n     * const Screen = createTourMethods('Screen', Do, Check, Execute);\n     *\n     * // 3. Call `startSteps` to start empty steps.\n     * startSteps();\n     *\n     * // 4. Call the tour methods to populate the steps created by `startSteps`.\n     * Screen.do.click();               // return of this method call is added to steps created by startSteps\n     * Screen.check.isHighlighted()     // same as above\n     * Screen.exec.complexSteps()     // same as above\n     *\n     * // 5. Call `getSteps` which returns the generated tour steps.\n     * const steps = getSteps();\n     * ```\n     */\n    let steps = [];\n\n    function startSteps() {\n        // always start by waiting for loading to finish\n        steps = [\n            {\n                content: 'wait for loading to finish',\n                trigger: 'body:not(:has(.loader))',\n                run: function () {},\n            },\n        ];\n    }\n\n    function getSteps() {\n        return steps;\n    }\n\n    // this is the method decorator\n    // when the method is called, the generated steps are added\n    // to steps\n    const methodProxyHandler = {\n        apply(target, thisArg, args) {\n            const res = target.call(thisArg, ...args);\n            if (config.isDebug()) {\n                // This step is added before the real steps.\n                // Very useful when debugging because we know which\n                // method call failed and what were the parameters.\n                const constructor = thisArg.constructor.name.split(' ')[1];\n                const methodName = target.name.split(' ')[1];\n                const argList = args\n                    .map((a) => (typeof a === 'string' ? `'${a}'` : `${a}`))\n                    .join(', ');\n                steps.push({\n                    content: `DOING \"${constructor}.${methodName}(${argList})\"`,\n                    trigger: '.pos',\n                    run: () => {},\n                });\n            }\n            steps.push(...res);\n            return res;\n        },\n    };\n\n    // we proxy get of the method to decorate the method call\n    const proxyHandler = {\n        get(target, key) {\n            const method = target[key];\n            if (!method) {\n                throw new Error(`Tour method '${key}' is not available.`);\n            }\n            return new Proxy(method.bind(target), methodProxyHandler);\n        },\n    };\n\n    /**\n     * Creates an object with `do`, `check` and `exec` properties which are instances of\n     * the given `Do`, `Check` and `Execute` classes, respectively. Calling methods\n     * automatically adds the returned steps to the steps created by `startSteps`.\n     *\n     * There are however underscored version (_do, _check, _exec).\n     * Calling methods thru the underscored version does not automatically\n     * add the returned steps to the current steps array. Useful when composing\n     * steps from other methods.\n     *\n     * @param {String} name\n     * @param {Function} Do class containing methods which return array of tour steps\n     * @param {Function} Check similar to Do class but the steps are mainly for checking\n     * @param {Function} Execute class containing methods which return array of tour steps\n     *                   but has access to methods of Do and Check classes via .do and .check,\n     *                   respectively. Here, we define methods that return tour steps based\n     *                   on the combination of steps from Do and Check.\n     */\n    function createTourMethods(name, Do, Check = class {}, Execute = class {}) {\n        Object.defineProperty(Do, 'name', { value: `${name}.do` });\n        Object.defineProperty(Check, 'name', { value: `${name}.check` });\n        Object.defineProperty(Execute, 'name', {\n            value: `${name}.exec`,\n        });\n        const methods = { do: new Do(), check: new Check(), exec: new Execute() };\n        // Allow Execute to have access to methods defined in Do and Check\n        // via do and exec, respectively.\n        methods.exec._do = methods.do;\n        methods.exec._check = methods.check;\n        return {\n            Do,\n            Check,\n            Execute,\n            [name]: {\n                do: new Proxy(methods.do, proxyHandler),\n                check: new Proxy(methods.check, proxyHandler),\n                exec: new Proxy(methods.exec, proxyHandler),\n                _do: methods.do,\n                _check: methods.check,\n                _exec: methods.exec,\n            },\n        };\n    }\n\n    return { startSteps, getSteps, createTourMethods };\n});\n", "/* global posmodel */\nodoo.define('point_of_sale.tour.pricelist', function (require) {\n    \"use strict\";\n\n    var Tour = require('web_tour.tour');\n    var utils = require('web.utils');\n    var round_di = utils.round_decimals;\n\n    function assert (condition, message) {\n        if (! condition) {\n            throw message || \"Assertion failed\";\n        }\n    }\n\n    function assertProductPrice(product, pricelist_name, quantity, expected_price) {\n        return function () {\n            var pricelist = _.findWhere(posmodel.pricelists, {name: pricelist_name});\n            var frontend_price = product.get_price(pricelist, quantity);\n            frontend_price = round_di(frontend_price, posmodel.dp['Product Price']);\n\n            var diff = Math.abs( expected_price - frontend_price );\n\n            assert(diff < 0.001,\n                JSON.stringify({\n                    product: product.id,\n                    product_display_name: product.display_name,\n                    pricelist_name: pricelist_name,\n                    quantity: quantity\n                }) + ' DOESN\\'T MATCH -> ' + expected_price + ' != ' + frontend_price);\n\n            return Promise.resolve();\n        };\n    }\n\n    // The global posmodel is only present when the posmodel is instanciated\n    // So, wait for everythiong to be loaded\n    var steps = [{ // Leave category displayed by default\n        content: 'waiting for loading to finish',\n        extra_trigger: 'body .pos:not(:has(.loader))', // Pos has finished loading\n        trigger: 'body:not(:has(.o_loading_indicator))', // WebClient has finished Loading\n        run: function () {\n            var product_wall_shelf = posmodel.db.search_product_in_category(0, 'Wall Shelf Unit')[0];\n            var product_small_shelf = posmodel.db.search_product_in_category(0, 'Small Shelf')[0];\n            var product_magnetic_board = posmodel.db.search_product_in_category(0, 'Magnetic Board')[0];\n            var product_monitor_stand = posmodel.db.search_product_in_category(0, 'Monitor Stand')[0];\n            var product_desk_pad = posmodel.db.search_product_in_category(0, 'Desk Pad')[0];\n            var product_letter_tray = posmodel.db.search_product_in_category(0, 'Letter Tray')[0];\n            var product_whiteboard = posmodel.db.search_product_in_category(0, 'Whiteboard')[0];\n\n            assertProductPrice(product_letter_tray, 'Public Pricelist', 0, 4.8)()\n                .then(assertProductPrice(product_letter_tray, 'Public Pricelist', 1, 4.8))\n                .then(assertProductPrice(product_letter_tray, 'Fixed', 1, 1))\n                .then(assertProductPrice(product_wall_shelf, 'Fixed', 1, 2))\n                .then(assertProductPrice(product_small_shelf, 'Fixed', 1, 13.95))\n                .then(assertProductPrice(product_wall_shelf, 'Percentage', 1, 0))\n                .then(assertProductPrice(product_small_shelf, 'Percentage', 1, 0.03))\n                .then(assertProductPrice(product_magnetic_board, 'Percentage', 1, 1.98))\n                .then(assertProductPrice(product_wall_shelf, 'Formula', 1, 6.86))\n                .then(assertProductPrice(product_small_shelf, 'Formula', 1, 2.99))\n                .then(assertProductPrice(product_magnetic_board, 'Formula', 1, 11.98))\n                .then(assertProductPrice(product_monitor_stand, 'Formula', 1, 8.19))\n                .then(assertProductPrice(product_desk_pad, 'Formula', 1, 6.98))\n                .then(assertProductPrice(product_wall_shelf, 'min_quantity ordering', 1, 2))\n                .then(assertProductPrice(product_wall_shelf, 'min_quantity ordering', 2, 1))\n                .then(assertProductPrice(product_letter_tray, 'Category vs no category', 1, 2))\n                .then(assertProductPrice(product_letter_tray, 'Category', 1, 2))\n                .then(assertProductPrice(product_wall_shelf, 'Product template', 1, 1))\n                .then(assertProductPrice(product_wall_shelf, 'Dates', 1, 2))\n                .then(assertProductPrice(product_small_shelf, 'Pricelist base rounding', 1, 13.95))\n                .then(assertProductPrice(product_whiteboard, 'Public Pricelist', 1, 3.2))\n                .then(function () {\n                    $('.pos').addClass('done-testing');\n                });\n        },\n    }, {\n        trigger: '.opening-cash-control .button:contains(\"Open session\")',\n    }];\n\n    steps = steps.concat([{\n        content: \"wait for unit tests to finish\",\n        trigger: \".pos.done-testing\",\n        run: function () {}, // it's a check\n    }, {\n        content: \"click category switch\",\n        trigger: \".breadcrumb-home\",\n        run: 'click',\n    }, {\n        content: \"click pricelist button\",\n        trigger: \".control-button.o_pricelist_button\",\n    }, {\n        content: \"verify default pricelist is set\",\n        trigger: \".selection-item.selected:contains('Public Pricelist')\",\n        run: function () {}, // it's a check\n    }, {\n        content: \"select fixed pricelist\",\n        trigger: \".selection-item:contains('Fixed')\",\n    }, {\n        content: \"open partner list\",\n        trigger: \"button.set-partner\",\n    }, {\n        content: \"select Deco Addict\",\n        trigger: \".partner-line:contains('Deco Addict')\",\n    }, {\n        content: \"click pricelist button\",\n        trigger: \".control-button.o_pricelist_button\",\n    }, {\n        content: \"verify pricelist changed\",\n        trigger: \".selection-item.selected:contains('Public Pricelist')\",\n        run: function () {}, // it's a check\n    }, {\n        content: \"cancel pricelist dialog\",\n        trigger: \".button.cancel:visible\",\n    }, {\n        content: \"open customer list\",\n        trigger: \"button.set-partner\",\n    }, {\n        content: \"select Lumber Inc\",\n        trigger: \".partner-line:contains('Lumber Inc')\",\n    },  {\n        content: \"click pricelist button\",\n        trigger: \".control-button.o_pricelist_button\",\n    }, {\n        content: \"verify pricelist remained public pricelist ('Not loaded' is not available)\",\n        trigger: \".selection-item.selected:contains('Public Pricelist')\",\n        run: function () {}, // it's a check\n    }, {\n        content: \"cancel pricelist dialog\",\n        trigger: \".button.cancel:visible\",\n    },  {\n        content: \"click pricelist button\",\n        trigger: \".control-button.o_pricelist_button\",\n    }, {\n        content: \"select fixed pricelist\",\n        trigger: \".selection-item:contains('min_quantity ordering')\",\n    }, {\n        content: \"order 1 kg shelf\",\n        trigger: \".product:contains('Wall Shelf')\",\n    }, {\n        content: \"change qty to 2 kg\",\n        trigger: \".numpad button.input-button:visible:contains('2')\",\n    }, {\n        content: \"qty of Wall Shelf line should be 2\",\n        trigger: \".order-container .orderlines .orderline.selected .product-name:contains('Wall Shelf')\",\n        extra_trigger: \".order-container .orderlines .orderline.selected .product-name:contains('Wall Shelf') ~ .info-list .info em:contains('2.0')\",\n        run: function() {},\n    }, {\n        content: \"verify that unit price of shelf changed to $1\",\n        trigger: \".total > .value:contains('$ 2.00')\",\n        run: function() {},\n    }, {\n        content: \"order different shelf\",\n        trigger: \".product:contains('Small Shelf')\",\n    }, {\n        content: \"Small Shelf line should be selected with quantity 1\",\n        trigger: \".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf')\",\n        extra_trigger: \".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf') ~ .info-list .info em:contains('1.0')\",\n        run: function() {}\n    }, {\n        content: \"change to price mode\",\n        trigger: \".numpad button:contains('Price')\",\n    }, {\n        content: \"make sure price mode is activated\",\n        trigger: \".numpad button.selected-mode:contains('Price')\",\n        run: function() {},\n    }, {\n        content: \"manually override the unit price of these shelf to $5\",\n        trigger: \".numpad button.input-button:visible:contains('5')\",\n    }, {\n        content: \"Small Shelf line should be selected with unit price of 5\",\n        trigger: \".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf')\",\n        extra_trigger: \".order-container .orderlines .orderline.selected .product-name:contains('Small Shelf') ~ .price:contains('5.0')\",\n    }, {\n        content: \"change back to qty mode\",\n        trigger: \".numpad button:contains('Qty')\",\n    }, {\n        content: \"make sure qty mode is activated\",\n        trigger: \".numpad button.selected-mode:contains('Qty')\",\n        run: function() {},\n    }, {\n        content: \"click pricelist button\",\n        trigger: \".control-button.o_pricelist_button\",\n    }, {\n        content: \"select public pricelist\",\n        trigger: \".selection-item:contains('Public Pricelist')\",\n    }, {\n        content: \"verify that the boni shelf have been recomputed and the shelf have not (their price was manually overridden)\",\n        trigger: \".total > .value:contains('$ 8.96')\",\n    }, {\n        content: \"click pricelist button\",\n        trigger: \".control-button.o_pricelist_button\",\n    }, {\n        content: \"select fixed pricelist\",\n        trigger: \".selection-item:contains('min_quantity ordering')\",\n    }, {\n        content: \"close the Point of Sale frontend\",\n        trigger: \".header-button\",\n    }, {\n        content: \"confirm closing the frontend\",\n        trigger: \".header-button\",\n        run: function() {}, //it's a check,\n    }]);\n\n    Tour.register('pos_pricelist', { test: true, url: '/pos/ui' }, steps);\n});\n\nodoo.define('point_of_sale.tour.acceptance', function (require) {\n    \"use strict\";\n\n    var Tour = require(\"web_tour.tour\");\n\n    function add_product_to_order(product_name) {\n        return [{\n            content: 'buy ' + product_name,\n            trigger: '.product-list .product-name:contains(\"' + product_name + '\")',\n        }, {\n            content: 'the ' + product_name + ' have been added to the order',\n            trigger: '.order .product-name:contains(\"' + product_name + '\")',\n            run: function () {},\n        }];\n    }\n\n    function set_fiscal_position_on_order(fp_name) {\n        return [{\n            content: 'set fiscal position',\n            trigger: '.control-button.o_fiscal_position_button',\n        }, {\n            content: 'choose fiscal position ' + fp_name + ' to add to the order',\n            trigger: '.popups .popup .selection .selection-item:contains(\"' + fp_name + '\")',\n        }, {\n            content: 'the fiscal position ' + fp_name + ' has been set to the order',\n            trigger: '.control-button.o_fiscal_position_button:contains(\"' + fp_name + '\")',\n            run: function () {},\n        }];\n    }\n\n    function press_payment_numpad(val) {\n        return [{\n            content: `press ${val} on payment screen numpad`,\n            trigger: `.payment-numpad .input-button:contains(\"${val}\"):visible`,\n        }]\n    }\n\n    function press_product_numpad(val) {\n        return [{\n            content: `press ${val} on product screen numpad`,\n            trigger: `.numpad .input-button:contains(\"${val}\"):visible`,\n        }]\n    }\n\n    function selected_payment_has(name, val) {\n        return [{\n            content: `selected payment is ${name} and has ${val}`,\n            trigger: `.paymentlines .paymentline.selected .payment-name:contains(\"${name}\")`,\n            extra_trigger: `.paymentlines .paymentline.selected .payment-name:contains(\"${name}\") ~ .payment-amount:contains(\"${val}\")`,\n            run: function () {},\n        }]\n    }\n\n    function selected_orderline_has({ product, price = null, quantity = null }) {\n        const result = [];\n        if (price !== null) {\n            result.push({\n                content: `Selected line has product '${product}' and price '${price}'`,\n                trigger: `.order-container .orderlines .orderline.selected .product-name:contains(\"${product}\") ~ span.price:contains(\"${price}\")`,\n                run: function () {},\n            });\n        }\n        if (quantity !== null) {\n            result.push({\n                content: `Selected line has product '${product}' and quantity '${quantity}'`,\n                trigger: `.order-container .orderlines .orderline.selected .product-name:contains('${product}') ~ .info-list .info em:contains('${quantity}')`,\n                run: function () {},\n            });\n        }\n        return result;\n    }\n\n    function verify_order_total(total_str) {\n        return [{\n            content: 'order total contains ' + total_str,\n            trigger: '.order .total .value:contains(\"' + total_str + '\")',\n            run: function () {}, // it's a check\n        }];\n    }\n\n    function goto_payment_screen_and_select_payment_method() {\n        return [{\n            content: \"go to payment screen\",\n            trigger: '.button.pay',\n        }, {\n            content: \"pay with cash\",\n            trigger: '.paymentmethod:contains(\"Cash\")',\n        }];\n    }\n\n    function finish_order() {\n        return [{\n            content: \"validate the order\",\n            trigger: '.payment-screen .button.next.highlight:visible',\n        }, {\n            content: \"verify that the order has been successfully sent to the backend\",\n            trigger: \".js_connected:visible\",\n            run: function () {},\n        }, {\n            content: \"click Next Order\",\n            trigger: '.receipt-screen .button.next.highlight:visible',\n        }, {\n            content: \"check if we left the receipt screen\",\n            trigger: '.pos-content .screen:not(:has(.receipt-screen))',\n            run: function () {},\n        }];\n    }\n\n    var steps = [{\n            content: 'waiting for loading to finish',\n            trigger: 'body:not(:has(.loader))',\n            run: function () {},\n        }, { // Leave category displayed by default\n            content: \"click category switch\",\n            trigger: \".breadcrumb-home\",\n        }];\n\n    steps = steps.concat(add_product_to_order('Desk Organizer'));\n    steps = steps.concat(verify_order_total('5.10'));\n\n    steps = steps.concat(add_product_to_order('Desk Organizer'));\n    steps = steps.concat(verify_order_total('10.20'));\n    steps = steps.concat(goto_payment_screen_and_select_payment_method());\n\n    /*  add payment line of only 5.20\n        status:\n            order-total := 10.20\n            total-payment := 11.70\n        expect:\n            remaining := 0.00\n            change := 1.50\n    */\n    steps = steps.concat(press_payment_numpad('5'));\n    steps = steps.concat(selected_payment_has('Cash', '5.0'));\n    steps = steps.concat([{\n        content: \"verify remaining\",\n        trigger: '.payment-status-remaining .amount:contains(\"5.20\")',\n        run: function () {},\n    }, {\n        content: \"verify change\",\n        trigger: '.payment-status-change .amount:contains(\"0.00\")',\n        run: function () {},\n    }]);\n\n    /*  make additional payment line of 6.50\n        status:\n            order-total := 10.20\n            total-payment := 11.70\n        expect:\n            remaining := 0.00\n            change := 1.50\n    */\n    steps = steps.concat([{\n        content: \"pay with cash\",\n        trigger: '.paymentmethod:contains(\"Cash\")',\n    }]);\n    steps = steps.concat(selected_payment_has('Cash', '5.2'));\n    steps = steps.concat(press_payment_numpad('6'))\n    steps = steps.concat(selected_payment_has('Cash', '6.0'));\n    steps = steps.concat([{\n        content: \"verify remaining\",\n        trigger: '.payment-status-remaining .amount:contains(\"0.00\")',\n        run: function () {},\n    }, {\n        content: \"verify change\",\n        trigger: '.payment-status-change .amount:contains(\"0.80\")',\n        run: function () {},\n    }]);\n\n    steps = steps.concat(finish_order());\n\n    // test opw-672118 orderline subtotal rounding\n    steps = steps.concat(add_product_to_order('Desk Organizer'));\n    steps = steps.concat(selected_orderline_has({product: 'Desk Organizer', quantity: '1.0'}));\n    steps = steps.concat(press_product_numpad('.'))\n    steps = steps.concat(selected_orderline_has({product: 'Desk Organizer', quantity: '0.0', price: '0.0'}));\n    steps = steps.concat(press_product_numpad('9'))\n    steps = steps.concat(selected_orderline_has({product: 'Desk Organizer', quantity: '0.9', price: '4.59'}));\n    steps = steps.concat(press_product_numpad('9'))\n    steps = steps.concat(selected_orderline_has({product: 'Desk Organizer', quantity: '0.99', price: '5.05'}));\n    steps = steps.concat(goto_payment_screen_and_select_payment_method());\n    steps = steps.concat(selected_payment_has('Cash', '5.05'));\n    steps = steps.concat(finish_order());\n\n    // Test fiscal position one2many map (align with backend)\n    steps = steps.concat(add_product_to_order('Letter Tray'));\n    steps = steps.concat(selected_orderline_has({product: 'Letter Tray', quantity: '1.0'}));\n    steps = steps.concat(verify_order_total('5.28'));\n    steps = steps.concat(set_fiscal_position_on_order('FP-POS-2M'));\n    steps = steps.concat(verify_order_total('5.52'));\n\n    steps = steps.concat([{\n        content: \"open closing the Point of Sale frontend popup\",\n        trigger: \".header-button\",\n    }, {\n        content: \"close the Point of Sale frontend\",\n        trigger: \".close-pos-popup .button:contains('Discard')\",\n        run: function() {}, //it's a check,\n    }]);\n\n    Tour.register('pos_basic_order', { test: true, url: '/pos/ui' }, steps);\n\n});\n", "odoo.define('pos_sale.tour.ProductScreenTourMethods', function (require) {\n    'use strict';\n\n    const { createTourMethods } = require('point_of_sale.tour.utils');\n    const { Do, Check, Execute } = require('point_of_sale.tour.ProductScreenTourMethods');\n\n    class DoExt extends Do {\n        clickQuotationButton() {\n            return [\n                {\n                    content: 'click quotation button',\n                    trigger: '.o_sale_order_button',\n                }\n            ];\n        }\n\n        selectFirstOrder() {\n            return [\n                {\n                    content: `select order`,\n                    trigger: `.order-row .col.name:first`,\n                },\n                {\n                    content: `click on select the order`,\n                    trigger: `.selection-item:contains('Settle the order')`,\n                }\n            ];\n        }\n\n        selectNthOrder(n) {\n            return [\n                {\n                    content: `select order`,\n                    trigger: `.order-list .order-row:nth-child(${n})`,\n                },\n                {\n                    content: `click on select the order`,\n                    trigger: `.selection-item:contains('Settle the order')`,\n                }\n            ];\n        }\n\n        downPaymentFirstOrder() {\n            return [\n                {\n                    content: `select order`,\n                    trigger: `.order-row .col.name:first`,\n                },\n                {\n                    content: `click on select the order`,\n                    trigger: `.selection-item:contains('Apply a down payment')`,\n                },\n                {\n                    content: `click on +10 button`,\n                    trigger: `.mode-button.add:contains('+10')`,\n                },\n                {\n                    content: `click on ok button`,\n                    trigger: `.button.confirm`,\n                }\n            ];\n        }\n    }\n    return createTourMethods('ProductScreen', DoExt, Check, Execute);\n});\n", "odoo.define('pos_sale.tour', function (require) {\n    'use strict';\n\n    const { Chrome } = require('point_of_sale.tour.ChromeTourMethods');\n    const { PaymentScreen } = require('point_of_sale.tour.PaymentScreenTourMethods');\n    const { ProductScreen } = require('pos_sale.tour.ProductScreenTourMethods');\n    const { ReceiptScreen } = require('point_of_sale.tour.ReceiptScreenTourMethods');\n    const { TicketScreen } = require('point_of_sale.tour.TicketScreenTourMethods');\n    const { getSteps, startSteps } = require('point_of_sale.tour.utils');\n    const Tour = require('web_tour.tour');\n\n    // signal to start generating steps\n    // when finished, steps can be taken from getSteps\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickQuotationButton();\n    ProductScreen.do.selectFirstOrder();\n    ProductScreen.check.selectedOrderlineHas('Pizza Chicken', 9);\n    ProductScreen.do.pressNumpad('Qty 2'); // Change the quantity of the product to 2\n    ProductScreen.check.selectedOrderlineHas('Pizza Chicken', 2);\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickValidate();\n    Chrome.do.clickTicketButton();\n\n    Tour.register('PosSettleOrder', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickQuotationButton();\n    // The second item in the list is the first sale.order.\n    ProductScreen.do.selectNthOrder(2);\n    ProductScreen.check.selectedOrderlineHas('product1', 1);\n    ProductScreen.check.totalAmountIs(\"10.00\");\n\n    ProductScreen.do.clickQuotationButton();\n    // The first item in the list is the second sale.order.\n    // Selecting the 2nd sale.order should use a new order,\n    // therefore, the total amount will change.\n    ProductScreen.do.selectNthOrder(1);\n    ProductScreen.check.selectedOrderlineHas('product2', 1);\n    ProductScreen.check.totalAmountIs(\"11.00\");\n\n    Tour.register('PosSettleOrderIncompatiblePartner', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickQuotationButton();\n    ProductScreen.do.selectFirstOrder();\n    ProductScreen.do.clickOrderline(\"Product A\", \"1\");\n    ProductScreen.check.selectedOrderlineHas('Product A', '1.00');\n    ProductScreen.do.clickOrderline(\"Product B\", \"1\");\n    ProductScreen.do.pressNumpad('Qty 0');\n    ProductScreen.check.selectedOrderlineHas('Product B', '0.00');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n\n    Tour.register('PosSettleOrder2', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickQuotationButton();\n    ProductScreen.do.selectFirstOrder();\n    ProductScreen.do.clickOrderline(\"Product A\", \"1\");\n    ProductScreen.check.selectedOrderlineHas('Product A', '1.00');\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.check.remainingIs('0.0');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.check.isShown();\n\n    Tour.register('PosSettleOrder3', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.confirmOpeningPopup();\n    ProductScreen.do.clickQuotationButton();\n    ProductScreen.do.selectFirstOrder();\n    ProductScreen.check.totalAmountIs(40);\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Bank');\n    PaymentScreen.do.clickValidate();\n    Chrome.do.clickTicketButton();\n\n    Tour.register('PosSettleOrderRealTime', { test: true, url: '/pos/ui' }, getSteps());\n\n    startSteps();\n\n    ProductScreen.do.clickQuotationButton();\n    ProductScreen.do.downPaymentFirstOrder();\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.do.clickNextOrder();\n    ProductScreen.do.clickRefund();\n    // Filter should be automatically 'Paid'.\n    TicketScreen.check.filterIs('Paid');\n    TicketScreen.do.selectOrder('-0001');\n    TicketScreen.do.clickOrderline('Down Payment');\n    TicketScreen.do.pressNumpad('1');\n    TicketScreen.do.confirmRefund();\n    ProductScreen.do.clickPayButton();\n    PaymentScreen.do.clickPaymentMethod('Cash');\n    PaymentScreen.do.clickValidate();\n    ReceiptScreen.do.clickNextOrder();\n\n    Tour.register('PosRefundDownpayment', { test: true, url: '/pos/ui' }, getSteps());\n});\n", "odoo.define('auth_totp.tours', function(require) {\n\"use strict\";\n\nconst tour = require('web_tour.tour');\nconst ajax = require('web.ajax');\n\nfunction openRoot() {\n    return [{\n        content: \"return to client root to avoid race condition\",\n        trigger: 'body',\n        run() {\n            $('body').addClass('wait');\n            window.location = '/web';\n        }\n    }, {\n        content: \"wait for client reload\",\n        trigger: 'body:not(.wait)',\n        run() {}\n    }];\n}\nfunction openUserProfileAtSecurityTab() {\n    return [{\n        content: 'Open user account menu',\n        trigger: '.o_user_menu .oe_topbar_name',\n        run: 'click',\n    }, {\n        content: \"Open preferences / profile screen\",\n        trigger: '[data-menu=settings]',\n        run: 'click',\n    }, {\n        content: \"Switch to security tab\",\n        trigger: 'a[role=tab]:contains(\"Account Security\")',\n        run: 'click',\n    }];\n}\n\n/**\n * Checks that the TOTP button is in the specified state (true = enabled =\n * can disable, false = disabled = can enable), then closes the profile dialog\n * if it's one (= hr not installed).\n *\n * If no totp state is provided, just checks that the toggle exists.\n */\nfunction closeProfileDialog({content, totp_state}) {\n    let trigger;\n    switch (totp_state) {\n    case true: trigger = 'button[name=action_totp_disable]'; break;\n    case false: trigger = 'button[name=action_totp_enable_wizard]'; break;\n    case undefined: trigger = 'button.o_auth_2fa_btn'; break;\n    default: throw new Error(`Invalid totp state ${totp_state}`)\n    }\n\n    return [{\n        content,\n        trigger,\n        run() {\n            const $modal = this.$anchor.parents('.o_dialog_container');\n            if ($modal.length) {\n                $modal.find('button[name=preference_cancel]').click()\n            }\n        }\n    }, {\n        trigger: 'body',\n        async run() {\n            while (document.querySelector('.o_dialog_container .o_dialog')) {\n                await Promise.resolve();\n            }\n            this.$anchor.addClass('dialog-closed');\n        },\n    }, {\n        trigger: 'body.dialog-closed',\n        run() {},\n    }];\n}\n\ntour.register('totp_tour_setup', {\n    test: true,\n    url: '/web'\n}, [...openUserProfileAtSecurityTab(), {\n    content: \"Open totp wizard\",\n    trigger: 'button[name=action_totp_enable_wizard]',\n}, {\n    content: \"Check that we have to enter enhanced security mode and input password\",\n    extra_trigger: 'div:contains(\"enter your password\")',\n    trigger: '[name=password] input',\n    run: 'text demo',\n}, {\n    content: \"Confirm\",\n    trigger: \"button:contains(Confirm Password)\",\n}, {\n    content: \"Check the wizard has opened\",\n    trigger: 'li:contains(\"When requested to do so\")',\n    run() {}\n}, {\n    content: \"Get secret from collapsed div\",\n    trigger: 'a:contains(\"Cannot scan it?\")',\n    async run(helpers) {\n        const $secret = this.$anchor.closest('div').find('[name=secret] span:first-child');\n        const $copyBtn = $secret.find('button');\n        $copyBtn.remove();\n        const token = await ajax.jsonRpc('/totphook', 'call', {\n            secret: $secret.text()\n        });\n        helpers.text(token, '[name=code] input');\n        helpers.click('button.btn-primary:contains(Activate)');\n        $('body').addClass('got-token')\n    }\n}, {\n    content: 'wait for rpc',\n    trigger: 'body.got-token',\n    run() {}\n},\n...openRoot(),\n...openUserProfileAtSecurityTab(),\n...closeProfileDialog({\n    content: \"Check that the button has changed\",\n    totp_state: true,\n}),\n]);\n\ntour.register('totp_login_enabled', {\n    test: true,\n    url: '/'\n}, [{\n    content: \"check that we're on the login page or go to it\",\n    trigger: 'input#login, a:contains(Sign in)'\n}, {\n    content: \"input login\",\n    trigger: 'input#login',\n    run: 'text demo',\n}, {\n    content: 'input password',\n    trigger: 'input#password',\n    run: 'text demo',\n}, {\n    content: \"click da button\",\n    trigger: 'button:contains(\"Log in\")',\n}, {\n    content: \"expect totp screen\",\n    trigger: 'label:contains(Authentication Code)',\n}, {\n    content: \"input code\",\n    trigger: 'input[name=totp_token]',\n    async run(helpers) {\n        // TODO: if tours are ever async-aware the click should get moved out,\n        //       but currently there's no great way to make the tour wait until\n        //       we've retrieved and set the token: `:empty()` is aboutthe text\n        //       content of the HTML element, not the JS value property. We\n        //       could set a class but that's really no better than\n        //       procedurally clicking the button after we've set the input.\n        const token = await ajax.jsonRpc('/totphook', 'call', {});\n        helpers.text(token);\n        helpers.click('button:contains(\"Log in\")');\n    }\n}, {\n    content: \"check we're logged in\",\n    trigger: \".o_user_menu .oe_topbar_name\",\n    run() {}\n}]);\n\ntour.register('totp_login_device', {\n    test: true,\n    url: '/'\n}, [{\n    content: \"check that we're on the login page or go to it\",\n    trigger: 'input#login, a:contains(Sign in)'\n}, {\n    content: \"input login\",\n    trigger: 'input#login',\n    run: 'text demo',\n}, {\n    content: 'input password',\n    trigger: 'input#password',\n    run: 'text demo',\n}, {\n    content: \"click da button\",\n    trigger: 'button:contains(\"Log in\")',\n}, {\n    content: \"expect totp screen\",\n    trigger: 'label:contains(Authentication Code)',\n}, {\n    content: \"check remember device box\",\n    trigger: 'label[for=switch-remember]',\n}, {\n    content: \"input code\",\n    trigger: 'input[name=totp_token]',\n    async run(helpers) {\n        const token = await ajax.jsonRpc('/totphook', 'call', {})\n        helpers.text(token);\n        helpers.click('button:contains(\"Log in\")');\n    }\n}, {\n    content: \"check we're logged in\",\n    trigger: \".o_user_menu .oe_topbar_name\",\n    run: 'click',\n}, {\n    content: \"click the Log out button\",\n    trigger: '.dropdown-item[data-menu=logout]',\n}, {\n    content: \"check that we're back on the login page or go to it\",\n    trigger: 'input#login, a:contains(Log in)'\n}, {\n    content: \"input login again\",\n    trigger: 'input#login',\n    run: 'text demo',\n}, {\n    content: 'input password again',\n    trigger: 'input#password',\n    run: 'text demo',\n}, {\n    content: \"click da button again\",\n    trigger: 'button:contains(\"Log in\")',\n},  {\n    content: \"check we're logged in without 2FA\",\n    trigger: \".o_user_menu .oe_topbar_name\",\n    run() {}\n},\n// now go and disable two-factor authentication would be annoying to do in a separate tour\n// because we'd need to login & totp again as HttpCase.authenticate can't\n// succeed w/ totp enabled\n...openUserProfileAtSecurityTab(),\n{\n    content: \"Open totp wizard\",\n    trigger: 'button[name=action_totp_disable]',\n}, {\n    content: \"Check that we have to enter enhanced security mode and input password\",\n    extra_trigger: 'div:contains(\"enter your password\")',\n    trigger: '[name=password] input',\n    run: 'text demo',\n}, {\n    content: \"Confirm\",\n    trigger: \"button:contains(Confirm Password)\",\n},\n...openRoot(),\n...openUserProfileAtSecurityTab(),\n...closeProfileDialog({\n    content: \"Check that the button has changed\",\n    totp_state: false\n}),\n]);\n\ntour.register('totp_login_disabled', {\n    test: true,\n    url: '/'\n}, [{\n    content: \"check that we're on the login page or go to it\",\n    trigger: 'input#login, a:contains(Sign in)'\n}, {\n    content: \"input login\",\n    trigger: 'input#login',\n    run: 'text demo',\n}, {\n    content: 'input password',\n    trigger: 'input#password',\n    run: 'text demo',\n}, {\n    content: \"click da button\",\n    trigger: 'button:contains(\"Log in\")',\n},\n// normally we'd end the tour here as it's all we care about but there are a\n// bunch of ongoing queries from the loading of the web client which cause\n// issues, so go and open the preferences / profile screen to make sure\n// everything settles down\n...openUserProfileAtSecurityTab(),\n// close the dialog if that makes sense\n...closeProfileDialog({})\n]);\n\nconst columns = {};\ntour.register('totp_admin_disables', {\n    test: true,\n    url: '/web'\n}, [tour.stepUtils.showAppsMenuItem(), {\n    content: 'Go to settings',\n    trigger: '[data-menu-xmlid=\"base.menu_administration\"]'\n}, {\n    content: 'Wait for page',\n    trigger: '.o_menu_brand:contains(\"Settings\")',\n    run() {}\n}, {\n    content: \"Open Users menu\",\n    trigger: '[data-menu-xmlid=\"base.menu_users\"]'\n}, {\n    content: \"Open Users view\",\n    trigger: '[data-menu-xmlid=\"base.menu_action_res_users\"]',\n    run(helpers) {\n        // funny story: the users view we're trying to reach, sometimes we're\n        // already there, but if we re-click the next step executes before the\n        // action has the time to re-load, the one after that doesn't, and our\n        // selection get discarded by the action reloading, so here try to\n        // see if we're already on the users action through the breadcrumb and\n        // just close the menu if so\n        const $crumb = $('.breadcrumb');\n        if ($crumb.text().indexOf('Users') === -1) {\n            // on general settings page, click menu\n            helpers.click();\n        } else {\n            // else close menu\n            helpers.click($('[data-menu-xmlid=\"base.menu_users\"]'));\n        }\n    }\n}, {\n    content: \"Find Demo User\",\n    trigger: 'td.o_data_cell:contains(\"demo\")',\n    run(helpers) {\n        const $titles = this.$anchor.closest('table').find('tr:first th');\n        for (let i=0; i<$titles.length; ++i) {\n            columns[$titles[i].getAttribute('data-name')] = i;\n        }\n        const $row = this.$anchor.closest('tr');\n        const sel = $row.find('.o_list_record_selector input[type=checkbox]');\n        helpers.click(sel);\n    }\n}, {\n    content: \"Open Actions menu\",\n    trigger: 'button.dropdown-toggle:contains(\"Action\")'\n}, {\n    content: \"Select totp remover\",\n    trigger: 'span.dropdown-item:contains(Disable two-factor authentication)'\n}, { // enhanced security yo\n    content: \"Check that we have to enter enhanced security mode & input password\",\n    extra_trigger: 'div:contains(\"enter your password\")',\n    trigger: '[name=password] input',\n    run: 'text admin',\n}, {\n    content: \"Confirm\",\n    trigger: \"button:contains(Confirm Password)\",\n}, {\n    content: \"open the user's form\",\n    trigger: \"td.o_data_cell:contains(demo)\",\n}, {\n    content: \"go to Account security Tab\",\n    trigger: \"a.nav-link:contains(Account Security)\",\n}, ...closeProfileDialog({\n    content: \"check that demo user has been de-totp'd\",\n    totp_state: false,\n}),\n])\n});\n", "odoo.define('auth_totp_mail.tours', function(require) {\n\"use strict\";\n\nconst tour = require('web_tour.tour');\n\nfunction openAccountSettingsTab() {\n    return [{\n        content: 'Go to settings',\n        trigger: '[data-menu-xmlid=\"base.menu_administration\"]'\n    }, {\n        content: 'Wait for page',\n        trigger: '.o_menu_brand:contains(\"Settings\")',\n        run: () => {}\n    }, {\n        content: \"Open Users menu\",\n        trigger: '[data-menu-xmlid=\"base.menu_users\"]'\n    }, {\n        content: \"Open Users view\",\n        trigger: '[data-menu-xmlid=\"base.menu_action_res_users\"]',\n        run: function (helpers) {\n            // funny story: the users view we're trying to reach, sometimes we're\n            // already there, but if we re-click the next step executes before the\n            // action has the time to re-load, the one after that doesn't, and our\n            // selection get discarded by the action reloading, so here try to\n            // see if we're already on the users action through the breadcrumb and\n            // just close the menu if so\n            const $crumb = $('.breadcrumb');\n            if ($crumb.text().indexOf('Users') === -1) {\n                // on general settings page, click menu\n                helpers.click();\n            } else {\n                // else close menu\n                helpers.click($('[data-menu-xmlid=\"base.menu_users\"]'));\n            }\n        }\n    }];\n}\n\ntour.register('totp_admin_self_invite', {\n    test: true,\n    url: '/web'\n}, [tour.stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {\n    content: \"open the user's form\",\n    trigger: \"td.o_data_cell:contains(admin)\",\n}, {\n    content: \"go to Account security Tab\",\n    trigger: \"a.nav-link:contains(Account Security)\",\n}, {\n    content: \"check that user cannot invite themselves to use 2FA.\",\n    trigger: \"body\",\n    run: function () {\n        const inviteBtn = $('button:contains(Invite to use 2FA)')[0];\n        if (!inviteBtn) {\n            $('body').addClass('CannotInviteYourself');\n        }\n    }\n}, {\n    content: \"check that user cannot invite themself.\",\n    trigger: \"body.CannotInviteYourself\"\n}]);\n\ntour.register('totp_admin_invite', {\n    test: true,\n    url: '/web'\n}, [tour.stepUtils.showAppsMenuItem(), ...openAccountSettingsTab(), {\n    content: \"open the user's form\",\n    trigger: \"td.o_data_cell:contains(demo)\",\n}, {\n    content: \"go to Account security Tab\",\n    trigger: \"a.nav-link:contains(Account Security)\",\n}, {\n    content: \"check that demo user can be invited to use 2FA.\",\n    trigger: \"button:contains(Invite to use 2FA)\",\n}]);\n\n});", "odoo.define('auth_totp_portal.tours', function(require) {\n\"use strict\";\n\nconst tour = require('web_tour.tour');\nconst ajax = require('web.ajax');\n\ntour.register('totportal_tour_setup', {\n    test: true,\n    url: '/my/security'\n}, [{\n    content: \"Open totp wizard\",\n    trigger: 'button#auth_totp_portal_enable',\n}, {\n    content: \"Check that we have to enter enhanced security mode\",\n    trigger: 'div:contains(\"enter your password\")',\n    run: () => {},\n}, {\n    content: \"Input password\",\n    trigger: '[name=password]',\n    run: 'text portal', // FIXME: better way to do this?\n}, {\n    content: \"Confirm\",\n    trigger: \"button:contains(Confirm Password)\",\n}, {\n    content: \"Check the wizard has opened\",\n    trigger: 'li:contains(\"scan the barcode below\")',\n    run: () => {}\n}, {\n    content: \"Get secret from collapsed div\",\n    trigger: 'a:contains(\"Cannot scan it?\")',\n    run: async function(helpers) {\n        const secret = this.$anchor.closest('div').find('span[name=\"secret\"]').text();\n        const token = await ajax.jsonRpc('/totphook', 'call', {\n            secret\n        });\n        helpers._text(helpers._get_action_values('input[name=code]'), token);\n        helpers._click(helpers._get_action_values('button.btn-primary:contains(Activate)'));\n    }\n}, {\n    content: \"Check that the button has changed\",\n    trigger: 'button:contains(Disable two-factor authentication)',\n    run: () => {}\n}]);\n\ntour.register('totportal_login_enabled', {\n    test: true,\n    url: '/'\n}, [{\n    content: \"check that we're on the login page or go to it\",\n    trigger: 'input#login, a:contains(Sign in)'\n}, {\n    content: \"input login\",\n    trigger: 'input#login',\n    run: 'text portal',\n}, {\n    content: 'input password',\n    trigger: 'input#password',\n    run: 'text portal',\n}, {\n    content: \"click da button\",\n    trigger: 'button:contains(\"Log in\")',\n}, {\n    content: \"expect totp screen\",\n    trigger: 'label:contains(Authentication Code)',\n}, {\n    content: \"input code\",\n    trigger: 'input[name=totp_token]',\n    run: async function (helpers) {\n        const token = await ajax.jsonRpc('/totphook', 'call', {});\n        helpers._text(helpers._get_action_values(), token);\n        // FIXME: is there a way to put the button as its own step trigger without\n        //        the tour straight blowing through and not waiting for this?\n        helpers._click(helpers._get_action_values('button:contains(\"Log in\")'));\n    }\n}, {\n    content: \"check we're logged in\",\n    trigger: \"h3:contains(Documents)\",\n    run: () => {}\n}, {\n    content: \"go back to security\",\n    trigger: \"a:contains(Security)\",\n},{\n    content: \"Open totp wizard\",\n    trigger: 'button#auth_totp_portal_disable',\n}, {\n    content: \"Check that we have to enter enhanced security mode\",\n    trigger: 'div:contains(\"enter your password\")',\n    run: () => {},\n}, {\n    content: \"Input password\",\n    trigger: '[name=password]',\n    run: 'text portal', // FIXME: better way to do this?\n}, {\n    content: \"Confirm\",\n    trigger: \"button:contains(Confirm Password)\",\n}, {\n    content: \"Check that the button has changed\",\n    trigger: 'button:contains(Enable two-factor authentication)',\n    run: () => {}\n}]);\n\ntour.register('totportal_login_disabled', {\n    test: true,\n    url: '/'\n}, [{\n    content: \"check that we're on the login page or go to it\",\n    trigger: 'input#login, a:contains(Sign in)'\n}, {\n    content: \"input login\",\n    trigger: 'input#login',\n    run: 'text portal',\n}, {\n    content: 'input password',\n    trigger: 'input#password',\n    run: 'text portal',\n}, {\n    content: \"click da button\",\n    trigger: 'button:contains(\"Log in\")',\n}, {\n    content: \"check we're logged in\",\n    trigger: \"h3:contains(Documents)\",\n    run: () => {}\n}]);\n});\n", "odoo.define('purchase_product_matrix.purchase_matrix_tour', function (require) {\n\"use strict\";\n\nvar tour = require('web_tour.tour');\n\ntour.register('purchase_matrix_tour', {\n    url: \"/web\",\n    test: true,\n}, [tour.stepUtils.showAppsMenuItem(), {\n    trigger: '.o_app[data-menu-xmlid=\"purchase.menu_purchase_root\"]',\n}, {\n    trigger: \".o_list_button_add\",\n    extra_trigger: \".o_purchase_order\"\n}, {\n    trigger: '.o_required_modifier[name=partner_id] input',\n    run: 'text Agrolait',\n}, {\n    trigger: '.ui-menu-item > a:contains(\"Agrolait\")',\n    auto: true,\n}, {\n    trigger: \"a:contains('Add a product')\"\n}, {\n    trigger: 'div[name=\"product_template_id\"] input',\n    run: \"text Matrix\",\n}, {\n    trigger: 'ul.ui-autocomplete a:contains(\"Matrix\")',\n}, {\n    trigger: '.o_product_variant_matrix',\n    run: function () {\n        // fill the whole matrix with 1's\n        $('.o_matrix_input').val(1);\n    }\n}, {\n    trigger: 'span:contains(\"Confirm\")',\n    run: 'click'\n}, {\n    trigger: '.o_form_button_save',\n    run: 'click' // SAVE Sales Order.\n},\n// Open the matrix through the pencil button next to the product in line edit mode.\n{\n    trigger: 'span:contains(\"Matrix (PAV11, PAV22, PAV31)\\nPA4: PAV41\")',\n    extra_trigger: '.o_form_status_indicator_buttons.invisible', // wait for save to be finished\n}, {\n    trigger: '[name=product_template_id] button.fa-pencil', // edit the matrix\n}, {\n    trigger: '.o_product_variant_matrix',\n    run: function () {\n        // update some of the matrix values.\n        $('.o_matrix_input').slice(8, 16).val(4);\n    } // set the qty to 4 for half of the matrix products.\n}, {\n    trigger: 'span:contains(\"Confirm\")',\n    run: 'click' // apply the matrix\n}, {\n    trigger: '.o_form_button_save',\n    extra_trigger: '.o_field_cell.o_data_cell.o_list_number:contains(\"4.00\")',\n    run: 'click' // SAVE Sales Order, after matrix has been applied (extra_trigger).\n},\n// Ensures the matrix is opened with the values, when adding the same product.\n{\n    trigger: 'a:contains(\"Add a product\")',\n    extra_trigger: '.o_form_status_indicator_buttons.invisible',\n}, {\n    trigger: 'div[name=\"product_template_id\"] input',\n    run: 'text Matrix',\n}, {\n    trigger: 'ul.ui-autocomplete a:contains(\"Matrix\")',\n}, {\n    trigger: 'input[value=\"4\"]',\n    run: function () {\n        // update some values of the matrix\n        $(\"input[value='4']\").slice(0, 4).val(8.2);\n    }\n}, {\n    trigger: 'span:contains(\"Confirm\")',\n    run: 'click' // apply the matrix\n}, ...tour.stepUtils.saveForm({ extra_trigger: '.o_field_cell.o_data_cell.o_list_number:contains(\"8.20\")' })\n]);\n\n\n});\n"], "file": "/web/assets/200-03835d2/web.assets_tests.js", "sourceRoot": "../../../"}